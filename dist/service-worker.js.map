{"version":3,"sources":["webpack://edgio-img-optimizer/./node_modules/@layer0/core/constants.js","webpack://edgio-img-optimizer/./node_modules/@layer0/core/node_modules/cookie/index.js","webpack://edgio-img-optimizer/./node_modules/@layer0/core/router/CustomCacheKey.js","webpack://edgio-img-optimizer/./node_modules/@layer0/core/router/GroupConfig.js","webpack://edgio-img-optimizer/./node_modules/@layer0/core/router/Groups.js","webpack://edgio-img-optimizer/./node_modules/@layer0/prefetch/constants.js","webpack://edgio-img-optimizer/./node_modules/@layer0/prefetch/sw/ChangeMethodPlugin.js","webpack://edgio-img-optimizer/./node_modules/@layer0/prefetch/sw/CustomCacheKeyPlugin.js","webpack://edgio-img-optimizer/./node_modules/@layer0/prefetch/sw/DevtoolsPlugin.js","webpack://edgio-img-optimizer/./node_modules/@layer0/prefetch/sw/PrefetchPlugin.js","webpack://edgio-img-optimizer/./node_modules/@layer0/prefetch/sw/Prefetcher.js","webpack://edgio-img-optimizer/./node_modules/@layer0/prefetch/sw/index.js","webpack://edgio-img-optimizer/./node_modules/@layer0/prefetch/sw/log.js","webpack://edgio-img-optimizer/./node_modules/@layer0/prefetch/sw/messageBrowser.js","webpack://edgio-img-optimizer/./node_modules/@layer0/prefetch/sw/prefetch.js","webpack://edgio-img-optimizer/./node_modules/workbox-cacheable-response/_version.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/DBWrapper.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/models/messages/messages.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/models/messages/messageGenerator.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/WorkboxError.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/cacheNames.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/cacheWrapper.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/deleteDatabase.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/dontWaitFor.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/fetchWrapper.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/getFriendlyURL.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/logger.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_version.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/models/quotaErrorCallbacks.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/registerQuotaErrorCallback.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/utils/pluginUtils.js","webpack://edgio-img-optimizer/./node_modules/workbox-expiration/_version.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/_version.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/_version.js","webpack://edgio-img-optimizer/./node_modules/workbox-strategies/_version.js","webpack://edgio-img-optimizer/./node_modules/workbox-cacheable-response/CacheableResponse.js","webpack://edgio-img-optimizer/./node_modules/workbox-cacheable-response/CacheableResponsePlugin.js","webpack://edgio-img-optimizer/./node_modules/workbox-expiration/models/CacheTimestampsModel.js","webpack://edgio-img-optimizer/./node_modules/workbox-expiration/CacheExpiration.js","webpack://edgio-img-optimizer/./node_modules/workbox-expiration/ExpirationPlugin.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/utils/constants.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/utils/normalizeHandler.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/Route.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/NavigationRoute.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/RegExpRoute.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/Router.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/registerRoute.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/setCatchHandler.js","webpack://edgio-img-optimizer/./node_modules/workbox-routing/setDefaultHandler.js","webpack://edgio-img-optimizer/./node_modules/workbox-strategies/CacheFirst.js","webpack://edgio-img-optimizer/./node_modules/workbox-strategies/CacheOnly.js","webpack://edgio-img-optimizer/./node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","webpack://edgio-img-optimizer/./node_modules/workbox-strategies/NetworkFirst.js","webpack://edgio-img-optimizer/./node_modules/workbox-strategies/NetworkOnly.js","webpack://edgio-img-optimizer/./node_modules/workbox-strategies/StaleWhileRevalidate.js","webpack://edgio-img-optimizer/webpack/bootstrap","webpack://edgio-img-optimizer/webpack/runtime/compat get default export","webpack://edgio-img-optimizer/webpack/runtime/define property getters","webpack://edgio-img-optimizer/webpack/runtime/hasOwnProperty shorthand","webpack://edgio-img-optimizer/webpack/runtime/make namespace object","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/canConstructReadableStream.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/copyResponse.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/clientsClaim.js","webpack://edgio-img-optimizer/./node_modules/workbox-core/skipWaiting.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/utils/precachePlugins.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/utils/createCacheKey.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/PrecacheController.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/utils/generateURLVariations.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/utils/getCacheKeyForURL.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/utils/addFetchListener.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/addRoute.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/precache.js","webpack://edgio-img-optimizer/./node_modules/workbox-precaching/precacheAndRoute.js","webpack://edgio-img-optimizer/./service-worker.js"],"names":["Object","defineProperty","exports","value","LAYER0_CONFIG_FILE","LAYER0_ASSET_ALIASES_FILE","LAYER0_ENV_VARIABLES","config","deploymentType","versionOverride","LAYER0_DEPLOYMENT_TYPE_AWS","LAYER0_HEADERS_PREFIX","LAYER0_MAX_USER_HEADERS_ALLOWED","LAYER0_TOO_MANY_HEADERS_STATUS_CODE","LAYER0_UNCACHED_PREFETCH_STATUS","ACTIONS","setHeader","updateHeader","removeHeader","syntheticRes","updatePath","proxy","addCookie","updateCookie","removeCookie","BACKENDS","js","static","permanentStatic","imageOptimizer","JS_BACKEND_HOSTNAME","HTTP_METHODS","head","get","post","delete","put","patch","options","HTTP_HEADERS","authorization","acceptEncoding","cacheControl","contentEncoding","contentLength","contentType","cookie","host","location","serverTiming","setCookie","userAgent","vary","via","xForwardedFor","xRequestId","xSwCacheControl","x0Browser","x0CacheControl","x0CachingStatus","x0ClientIp","x0Components","x0Destination","x0Device","x0DeviceIsBot","x0GeoCity","x0GeoCountryCode","x0GeoLatitude","x0GeoLongitude","x0GeoPostalCode","x0MatchedRoutes","x0Protocol","x0Route","x0Status","x0SurrogateKey","x0T","x0UserT","x0Vendor","x0Version","CACHING_STATUS","ok","private","method","bodyTooBig","code","noMaxAge","CACHEABLE_METHODS","Set","THROTTLED_QUERY_PARAM","PREFETCH_QUERY_PARAM","DEVTOOLS_PREFETCH_QUERY_PARAM","HEAD_QUERY_PARAM","POST_BODY_QUERY_PARAM","METHOD_QUERY_PARAM","ROUTES_FALLBACK","ROUTES_CATCH_GROUP","ROUTES_NOINDEX_GROUP","LAYER0_IMAGE_OPTIMIZER_PATH","IS_BROWSER","window","BROTLI_ENCODING","GZIP_ENCODING","parse","serialize","decode","decodeURIComponent","encode","encodeURIComponent","fieldContentRegExp","str","TypeError","obj","opt","pairs","split","dec","i","length","pair","index","indexOf","key","substring","trim","undefined","val","slice","tryDecode","name","enc","test","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","toUTCString","httpOnly","secure","sameSite","toLowerCase","e","__importDefault","this","mod","__esModule","Groups_1","cookie_1","CUSTOM_CACHE_KEY_ACTIONS","blacklistAll","blacklistSome","whitelistSome","addValue","removeMethod","removeBody","CustomCacheKey","constructor","actions","clone","newKey","excludeAllQueryParameters","push","action","srcRequest","query","excludeQueryParameters","names","excludeAllQueryParametersExcept","toKeep","has","addHeader","createGroups","values","headers","Array","isArray","createGroupedValue","body","srcValues","groups","default","result","matchingGroup","findMatchingGroup","_a","group","pattern","addDevice","addVendor","addIsBot","addBrowser","cookieHeader","join","cookies","toJSON","getActions","GroupConfig","byPattern","Error","groupedValue","matchRegex","source","GroupConfig_1","Groups","map","p","CACHE_NAME","LAYER0_PREFETCH_CACHE_NAME","BACKEND_REQUESTS_RESPONSE_HEADER_NAME","PREFETCH_HEADER_VALUE","LAYER0_PREFETCH_HEADER_VALUE","constants_1","ChangeMethodPlugin","urls","urlMatches","url","some","testUrl","async","request","URL","pathname","text","bodyParam","searchParams","set","toString","toUpperCase","Headers","Request","redirect","CustomCacheKey_1","CustomCacheKeyPlugin","route","forEach","conf","handleKeyConfig","deleteKeys","includes","PrefetchPlugin_1","CURRENT_REQUEST_MAP_CLEANUP_DELAY","DevtoolsPlugin","onResponse","routeConfig","isEnabledFn","currentRequests","metadata","_b","normalizedUrl","normalizeRequestUrlForCache","cleanupTimeout","clearTimeout","setTimeout","saveRequestMetadata","requestStart","Date","now","mode","isPrefetch","isPrefetchRequest","cachedResponse","response","getRequestMetadata","browserCache","ttfb","prefetch","constants_2","log_1","prefetch_1","origin","self","cacheHost","hostname","protocol","decodeQueryParams","PrefetchPlugin","incrementRead","incrementWrite","prefetchUpstreamRequests","onlyCachePrefetches","event","backendRequests","urlsToPrefetch","redirected","Response","maybeDecode","param","workbox_routing_1","workbox_strategies_1","workbox_expiration_1","workbox_cacheable_response_1","DevtoolsPlugin_1","messageBrowser_1","CustomCacheKeyPlugin_1","ChangeMethodPlugin_1","Stats","hits","misses","BUFFER_DELAY_MS","DEFAULT_MAX_AGE_SECONDS","Prefetcher","plugins","devtoolsEnabled","bufferedDevtoolMessages","manifestURL","cacheOrigins","importScripts","cacheableResponsePlugin","CacheableResponsePlugin","statuses","stats","initStats","initDevtoolsHandshakeListener","getRouteConfigsFromManifest","manifest","__LAYER0_CACHE_MANIFEST__","criteriaPath","cacheOptions","returnsResponse","_c","maxAgeSeconds","browser","serviceWorkerSeconds","edgeMaxAgeSeconds","edge","isPartialPathRoute","convertToGet","registerDevtoolsRoutes","createDevtoolsRoute","createRoute","cache","addEventListener","data","type","sendToAllClients","ackMessage","caches","keys","then","cacheNames","broadcast","addDevtoolsRequestMessageToBuffer","message","trimDevtoolsRequestMessageBuffer","clearDevtoolsRequestMessageTimeout","sliceIndex","sliceMinimumTimestamp","timestamp","shouldIntercept","skipAssets","destination","createDevtoolsPlugin","bind","routeMatcher","patternRegexp","RegExp","registerRoute","NetworkOnly","optMethod","routeHasServiceWorkerCaching","prefetchPlugin","ttl","defaultMaxAgeSeconds","ExpirationPlugin","splice","CacheFirst","cacheName","matchOptions","ignoreVary","devToolMessage","status","Prefetcher_1","log","messageBrowser","clients","matchAll","targetClients","client","postMessage","as","cors","_","DBWrapper","version","onupgradeneeded","onversionchange","_db","_name","_version","_onupgradeneeded","_onversionchange","close","db","Promise","resolve","reject","openRequestTimedOut","OPEN_TIMEOUT","openRequest","indexedDB","open","onerror","error","evt","transaction","abort","onsuccess","storeName","getAllKeys","count","getAllMatching","entries","includeKeys","entry","direction","txn","done","store","objectStore","target","results","openCursor","cursor","continue","storeNames","callback","onabort","oncomplete","args","objStore","apply","prototype","methodsToWrap","readonly","readwrite","methods","IDBObjectStore","_call","fallback","msg","JSON","stringify","messageGenerator","WorkboxError","errorCode","details","super","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","filter","eachCacheNameDetail","fn","updateDetails","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","_getEffectiveRequest","cacheKeyWillBeUsedPlugins","effectiveRequest","plugin","call","_isResponseSafeToCache","responseToCache","pluginsUsed","pluginMethod","matchWrapper","match","putWrapper","updatePlugins","oldResponse","newResponse","cacheWrapper","deleteDatabase","onblocked","dontWaitFor","promise","executeQuotaErrorCallbacks","wrappedFetch","fetchOptions","FetchEvent","preloadResponse","possiblePreloadResponse","failedFetchPlugins","originalRequest","requestClone","err","thrownError","pluginFilteredRequest","fetchResponse","fetch","fetchWrapper","getFriendlyURL","urlObj","String","href","replace","logger","quotaErrorCallbacks","registerQuotaErrorCallback","pluginUtils","callbackName","CacheableResponse","_statuses","_headers","isResponseCacheable","cacheable","headerName","cacheWillUpdate","_cacheableResponse","DB_NAME","OBJECT_STORE_NAME","normalizeURL","unNormalizedUrl","hash","CacheTimestampsModel","_cacheName","_handleUpgrade","createObjectStore","keyPath","createIndex","unique","id","_getId","minTimestamp","maxCount","entriesToDelete","entriesNotDeletedCount","urlsDeleted","CacheExpiration","_isRunning","_rerunRequested","_maxEntries","maxEntries","_maxAgeSeconds","_timestampModel","urlsExpired","expireEntries","setTimestamp","getTimestamp","expireOlderThan","Infinity","cachedResponseWillBeUsed","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","updateTimestampDone","updateTimestamp","waitUntil","cacheDidUpdate","_config","_cacheExpirations","Map","purgeOnQuotaError","deleteCacheAndMetadata","dateHeaderTimestamp","_getDateHeaderTimestamp","dateHeader","parsedDate","headerTime","getTime","defaultMethod","normalizeHandler","handler","handle","Route","NavigationRoute","allowlist","denylist","_match","_allowlist","_denylist","pathnameAndSearch","search","regExp","RegExpRoute","exec","Router","_routes","routes","addFetchListener","responsePromise","handleRequest","respondWith","addCacheListener","payload","requestPromises","all","urlsToCache","ports","startsWith","params","findMatchingRoute","_defaultHandler","_catchHandler","catch","matchResult","setDefaultHandler","setCatchHandler","unregisterRoute","routeIndex","defaultRouter","getOrCreateDefaultRouter","capture","captureUrl","matchCallback","moduleName","funcName","paramName","_plugins","_fetchOptions","_matchOptions","_getFromNetwork","responseClone","cachePutPromise","CacheOnly","cacheOkAndOpaquePlugin","NetworkFirst","isUsingCacheWillUpdate","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","_getTimeoutPromise","networkPromise","_getNetworkPromise","race","timeoutPromise","onNetworkTimeout","_respondFromCache","cachePut","StaleWhileRevalidate","fetchAndCachePromise","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","n","getter","d","a","definition","o","enumerable","prop","hasOwnProperty","r","Symbol","toStringTag","canConstructResponseFromBodyStream","testResponse","copyResponse","modifier","clonedResponse","responseInit","statusText","modifiedResponseInit","blob","clientsClaim","claim","skipWaiting","add","newPlugins","REVISION_SEARCH_PARAM","createCacheKey","urlObject","cacheKey","revision","cacheKeyURL","originalURL","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","addToCacheList","urlsToWarnAbout","cacheMode","firstEntry","secondEntry","integrity","warningMessage","console","warn","toBePrecached","alreadyPrecached","alreadyCachedRequests","existingCacheKeys","precacheRequests","_addURLToCache","updatedURLs","item","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","deletedURLs","credentials","cacheWillUpdatePlugin","isValidResponse","ignoreSearch","getURLsToCacheKeys","getCachedURLs","getCacheKeyForURL","createHandler","fallbackToNetwork","matchPrecache","createHandlerBoundToURL","precacheController","removeIgnoredSearchParams","ignoreURLParametersMatching","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","urlsToCacheKeys","possibleURL","possibleCacheKey","precachedURL","listenerAdded","addRoute","installListener","install","activateListener","activate","precacheAndRoute","__WB_MANIFEST"],"mappings":"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","file":"service-worker.js","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Layer0 configuration file name.\n */\nexports.LAYER0_CONFIG_FILE = 'layer0.config.js';\n/**\n * Indicate asset files that need to be uploaded under a different\n * bucket key.\n * It contains values like\n * {\n *   '/posts' => '/posts/index.html'\n * }\n */\nexports.LAYER0_ASSET_ALIASES_FILE = 'asset-aliases.json';\n/**\n * Environment variables used by Layer0.\n */\nexports.LAYER0_ENV_VARIABLES = {\n    /**\n     * Layer0 configuration environment variable key.\n     */\n    config: 'LAYER0_CONFIG',\n    /**\n     * Indicates whether code is running locally or in the cloud.\n     * @private\n     */\n    deploymentType: 'LAYER0_DEPLOYMENT_TYPE',\n    /**\n     * Allows Layer0 development team to easily override Layer0 version\n     * during development process.\n     * @private\n     */\n    versionOverride: 'LAYER0_VERSION_OVERRIDE',\n};\n/**\n * Indicates that code is running in AWS.\n * @private\n */\nexports.LAYER0_DEPLOYMENT_TYPE_AWS = 'AWS';\n/**\n * Prefix of all Layer0 headers.\n */\nexports.LAYER0_HEADERS_PREFIX = 'x-0-';\n/**\n * Maximum number of user headers allowed by Layer0 platform.\n *\n * We limit the request and response headers allowed to 70. This is due to a limitation that edge has\n * which at the moment supports up to 96 headers. Edge provider itself needs to use some of those headers\n * with the remainder used by our edge code.\n *\n * NOTE: This constant must be equal ot the constant of the same name defined in Layer0 buffer proxy.\n * NOTE: If this constant is updated then the constant of the same name has to be updated in @layer0/build-lambda module.\n */\nexports.LAYER0_MAX_USER_HEADERS_ALLOWED = 70;\n/**\n * Status code returned when there are too many request or response headers.\n *\n * Must be equal to HeaderOverflowError status code as defined in build lambda and Layer0 buffer proxy.\n */\nexports.LAYER0_TOO_MANY_HEADERS_STATUS_CODE = 542;\n/**\n * The status code returned when the layer0_prefetch query param is present and a response could not be found in the cache.\n */\nexports.LAYER0_UNCACHED_PREFETCH_STATUS = 412;\n/**\n * CDN-as-code configuration actions\n */\nexports.ACTIONS = {\n    setHeader: 'set-header',\n    updateHeader: 'update-header',\n    removeHeader: 'remove-header',\n    syntheticRes: 'synthetic-response',\n    updatePath: 'update-path',\n    proxy: 'proxy',\n    addCookie: 'add-cookie',\n    updateCookie: 'update-cookie',\n    removeCookie: 'remove-cookie',\n};\n/**\n * The backend for cloud functions\n */\nexports.BACKENDS = {\n    js: '__js__',\n    static: '__static__',\n    permanentStatic: '__permanent_static__',\n    imageOptimizer: '__image_optimizer__',\n};\n/**\n * The hostname used for the internal service running the user's application.\n */\nexports.JS_BACKEND_HOSTNAME = '127.0.0.1';\nexports.HTTP_METHODS = {\n    head: 'head',\n    get: 'get',\n    post: 'post',\n    delete: 'delete',\n    put: 'put',\n    patch: 'patch',\n    options: 'options',\n};\n/**\n * Common HTTP headers.\n */\nexports.HTTP_HEADERS = {\n    authorization: 'authorization',\n    acceptEncoding: 'accept-encoding',\n    cacheControl: 'cache-control',\n    contentEncoding: 'content-encoding',\n    contentLength: 'content-length',\n    contentType: 'content-type',\n    cookie: 'cookie',\n    host: 'host',\n    location: 'location',\n    serverTiming: 'server-timing',\n    setCookie: 'set-cookie',\n    userAgent: 'user-agent',\n    vary: 'vary',\n    via: 'via',\n    xForwardedFor: 'x-forwarded-for',\n    xRequestId: 'x-request-id',\n    xSwCacheControl: 'x-sw-cache-control',\n    x0Browser: 'x-0-browser',\n    x0CacheControl: 'x-0-cache-control',\n    x0CachingStatus: 'x-0-caching-status',\n    x0ClientIp: 'x-0-client-ip',\n    x0Components: 'x-0-components',\n    x0Destination: 'x-0-destination',\n    x0Device: 'x-0-device',\n    x0DeviceIsBot: 'x-0-device-is-bot',\n    x0GeoCity: 'x-0-geo-city',\n    x0GeoCountryCode: 'x-0-geo-country-code',\n    x0GeoLatitude: 'x-0-geo-latitude',\n    x0GeoLongitude: 'x-0-geo-longitude',\n    x0GeoPostalCode: 'x-0-geo-postal-code',\n    x0MatchedRoutes: 'x-0-matched-routes',\n    x0Protocol: 'x-0-protocol',\n    x0Route: 'x-0-route',\n    x0Status: 'x-0-status',\n    x0SurrogateKey: 'x-0-surrogate-key',\n    x0T: 'x-0-t',\n    x0UserT: 'x-0-user-t',\n    x0Vendor: 'x-0-vendor',\n    x0Version: 'x-0-version',\n};\n/**\n * Values for x-0-caching-status\n */\nexports.CACHING_STATUS = {\n    ok: 'ok',\n    private: 'private',\n    method: 'method',\n    bodyTooBig: 'body-too-big',\n    code: 'code',\n    setCookie: 'set-cookie',\n    noMaxAge: 'no-max-age',\n};\nexports.CACHEABLE_METHODS = new Set(['get', 'head']);\n/**\n * When present, this query parameter will cause Layer0 to return a 412 status\n * if a response could not be found in the cache.\n */\nexports.THROTTLED_QUERY_PARAM = 'layer0_prefetch';\n/**\n * Same value as above but DEPRECATED.\n */\nexports.PREFETCH_QUERY_PARAM = exports.THROTTLED_QUERY_PARAM;\n/**\n Labels the request so that devtools will display as prefetched\n */\nexports.DEVTOOLS_PREFETCH_QUERY_PARAM = 'layer0_dt_pf';\n/**\n * The name of the query parameter used to detect HEAD requests.\n */\nexports.HEAD_QUERY_PARAM = 'layer0_head';\n/**\n * The name of the query parameter used for the body of POST requests, which is used for the cache key\n */\nexports.POST_BODY_QUERY_PARAM = 'pref_layer0_body';\n/**\n * The name of the query parameter used for the method of requests, which is used for the cache key\n */\nexports.METHOD_QUERY_PARAM = 'pref_layer0_method';\n/**\n * Route Group name, which is used in router for fallback routes\n */\nexports.ROUTES_FALLBACK = 'fallback';\n/**\n * Route Group name, which is used in router for error page routes\n */\nexports.ROUTES_CATCH_GROUP = 'catch';\n/**\n * Route Group name, which is used in router for noindex routes\n */\nexports.ROUTES_NOINDEX_GROUP = 'noindex';\n/**\n * The path for the built-in image optimizer.\n */\nexports.LAYER0_IMAGE_OPTIMIZER_PATH = '/__layer0_image_optimizer';\n/**\n * Is current environment 'browser'\n */\nexports.IS_BROWSER = typeof window !== 'undefined';\n/**\n * Brotli encoding code.\n */\nexports.BROTLI_ENCODING = 'br';\n/**\n * Gzip encoding code.\n */\nexports.GZIP_ENCODING = 'gzip';\n","/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var pairs = str.split(';')\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var index = pair.indexOf('=')\n\n    // skip things that don't look like key=value\n    if (index < 0) {\n      continue;\n    }\n\n    var key = pair.substring(0, index).trim()\n\n    // only assign once\n    if (undefined == obj[key]) {\n      var val = pair.substring(index + 1, pair.length).trim()\n\n      // quoted values\n      if (val[0] === '\"') {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Groups_1 = __importDefault(require(\"./Groups\"));\nconst cookie_1 = require(\"cookie\");\nexports.CUSTOM_CACHE_KEY_ACTIONS = {\n    blacklistAll: 'blacklist-all-query-parameters',\n    blacklistSome: 'blacklist-some-query-parameters',\n    whitelistSome: 'whitelist-some-query-parameters',\n    addValue: 'add-value',\n    removeMethod: 'remove-method',\n    removeBody: 'remove-body',\n};\n/**\n * Allows you to split or normalize the cache space for a given route. Common use cases include:\n *\n * - serving multiple variants of the same URL based on a currency and/or language cookie.\n * - caching different responses based on device type\n * - ignoring all but a specific set of query parameters when looking up a response from the cache.\n *\n * **Example**\n *\n * ```js\n *  import { Router, CustomCacheKey } from '@layer0/core/router'\n *\n *  new Router()\n *    .match('/some-path', ({ cache }) => {\n *      cache({\n *        key: new CustomCacheKey()\n *          .excludeAllQueryParametersExcept('color', 'size')\n *          .addCookie('currency')\n *          .addCookie('location', cookie => {\n *            cookie.group('na').byPattern('us|ca')\n *            cookie.group('eur').byPattern('de|fr|ee')\n *          }),\n *        edge: {\n *          maxAgeSeconds: 60 * 60\n *        }\n *      })\n *    })\n * ```\n */\nclass CustomCacheKey {\n    constructor() {\n        this.config = [];\n        this.actions = [];\n    }\n    /**\n     * Creates a copy of the cache key.\n     */\n    clone() {\n        const newKey = new CustomCacheKey();\n        newKey.actions = this.actions;\n        newKey.config = this.config;\n        return newKey;\n    }\n    /**\n     * Excludes the entire query string from the cache key.\n     * @return {CustomCacheKey} A self-reference, suitable for chaining.\n     */\n    excludeAllQueryParameters() {\n        this.config.push({ action: exports.CUSTOM_CACHE_KEY_ACTIONS.blacklistAll });\n        this.actions.push((key, srcRequest) => {\n            key.query = {};\n        });\n        return this;\n    }\n    /**\n     * Excludes the provided query parameters from the cache key.  All other parameters\n     * will still be part of the cache key. We also refer to this as \"blacklisting\" query parameters.\n     * @param names The names of the query parameters to blacklist\n     * @return {CustomCacheKey} A self-reference, suitable for chaining.\n     */\n    excludeQueryParameters(...names) {\n        this.config.push({\n            action: exports.CUSTOM_CACHE_KEY_ACTIONS.blacklistSome,\n            names,\n        });\n        this.actions.push((key, srcRequest) => {\n            for (let name of names) {\n                delete key.query[name];\n            }\n        });\n        return this;\n    }\n    /**\n     * Excludes all query parameters except those provided from the cache key.  We also refer to\n     * this as \"whitelisting\" query parameters.  We recommend using this method over `excludeQueryParameters`\n     * as it's difficult to know all of the query parameters your application might receive and unexpected\n     * query parameters can lead to significantly lower cache hit rates.\n     * @param names The names of the query parameters to whitelist\n     * @return {CustomCacheKey} A self-reference, suitable for chaining.\n     */\n    excludeAllQueryParametersExcept(...names) {\n        this.config.push({\n            action: exports.CUSTOM_CACHE_KEY_ACTIONS.whitelistSome,\n            names,\n        });\n        this.actions.push((key, srcRequest) => {\n            const toKeep = new Set(names);\n            for (let name in key.query) {\n                if (!toKeep.has(name)) {\n                    delete key.query[name];\n                }\n            }\n        });\n        return this;\n    }\n    /**\n     * Adds a request header to the cache key.\n     * This will have no effect on service worker cache.\n     * @param name The name of the request header\n     * @param createGroups A function that accepts a `Groups` instance and calls `groups.group(name)` to group multiple values into a single cache key component\n     * @return {CustomCacheKey} A self-reference, suitable for chaining.\n     */\n    addHeader(name, createGroups) {\n        this.actions.push((key, srcRequest) => {\n            let values = srcRequest.headers[name];\n            if (!Array.isArray(values)) {\n                values = [values];\n            }\n            if (createGroups) {\n                key.headers[name] = this.createGroupedValue(createGroups, values);\n            }\n            else {\n                key.headers[name] = values;\n            }\n        });\n        return this.addValue(`\\${req:${name}}`, createGroups);\n    }\n    /**\n     * Removes the HTTP method from the cache key.\n     * @return A self-reference, suitable for chaining.\n     */\n    removeMethod() {\n        this.actions.push((key, srcRequest) => {\n            key.method = undefined;\n        });\n        this.config.push({\n            action: exports.CUSTOM_CACHE_KEY_ACTIONS.removeMethod,\n        });\n        return this;\n    }\n    /**\n     * Removes the HTTP body from the cache key.\n     * @return A self-reference, suitable for chaining.\n     */\n    removeBody() {\n        this.actions.push((key, srcRequest) => {\n            key.body = undefined;\n        });\n        this.config.push({\n            action: exports.CUSTOM_CACHE_KEY_ACTIONS.removeBody,\n        });\n        return this;\n    }\n    /**\n     * Creates a key value for a header or cookie based on the specified group creator\n     * @param createGroups the GroupCreator\n     * @param srcValues The values of the header or cookie in the request\n     */\n    createGroupedValue(createGroups, srcValues) {\n        const groups = new Groups_1.default();\n        const result = [];\n        createGroups(groups);\n        const matchingGroup = this.findMatchingGroup(groups, srcValues);\n        if (matchingGroup) {\n            result.push(matchingGroup);\n        }\n        else {\n            // if the value doesn't match any group, use the value itself\n            result.push(...srcValues);\n        }\n        return result;\n    }\n    findMatchingGroup(groups, srcValues) {\n        var _a;\n        for (let group of groups.groups) {\n            for (let value of srcValues) {\n                /* istanbul ignore next */\n                if ((_a = group.pattern) === null || _a === void 0 ? void 0 : _a.test(value)) {\n                    return group.name;\n                }\n            }\n        }\n    }\n    /**\n     * Specifies that requests should be cached on a per-device basis.\n     * This will have no effect on service worker cache.\n     * @return {CustomCacheKey} A self-reference, suitable for chaining.\n     */\n    addDevice() {\n        return this.addHeader('x-0-device');\n    }\n    /**\n     * Specifies that requests should be cached on a per-vendor basis.\n     * This will have no effect on service worker cache.\n     * @return {CustomCacheKey} A self-reference, suitable for chaining.\n     */\n    addVendor() {\n        return this.addHeader('x-0-vendor');\n    }\n    /**\n     * Specifies that requests should be cached differently for bots.\n     * This will have no effect on service worker cache.\n     * @return {CustomCacheKey} A self-reference, suitable for chaining.\n     */\n    addIsBot() {\n        return this.addHeader('x-0-device-is-bot');\n    }\n    /**\n     * Specifies that requests should be cached on a per-browser basis.\n     * This will have no effect on service worker cache.\n     * @return {CustomCacheKey} A self-reference, suitable for chaining.\n     */\n    addBrowser() {\n        return this.addHeader('x-0-browser');\n    }\n    /**\n     * Adds a cookie to the cache key.\n     * This will have no effect on service worker cache.\n     * @param name The name of the cookie\n     * @param createGroups An function that accepts a `Groups` instance and calls `groups.group(name)` to group multiple values into a single cache key component\n     * @return {CustomCacheKey} A self-reference, suitable for chaining.\n     */\n    addCookie(name, createGroups) {\n        this.actions.push((key, srcRequest) => {\n            let cookieHeader = srcRequest.headers.cookie || '';\n            if (Array.isArray(cookieHeader)) {\n                // Based on https://tools.ietf.org/html/rfc6265#section-5.4 we should only get a single cookie header\n                // If we get more than one, we, just join them into a single parseable cookie value in case\n                // the origin decides to read them all\n                cookieHeader = cookieHeader.join(';');\n            }\n            const cookie = cookie_1.parse(cookieHeader);\n            const value = cookie[name];\n            if (createGroups) {\n                key.cookies[name] = this.createGroupedValue(createGroups, [value]);\n            }\n            else {\n                key.cookies[name] = value;\n            }\n        });\n        return this.addValue(`\\${req:cookie:${name}}`, createGroups);\n    }\n    /**\n     * @private\n     * @return {CustomCacheKey} A self-reference, suitable for chaining.\n     */\n    addValue(value, createGroups) {\n        const action = {\n            action: exports.CUSTOM_CACHE_KEY_ACTIONS.addValue,\n            value,\n        };\n        if (createGroups != null) {\n            const groups = new Groups_1.default();\n            createGroups(groups);\n            action.groups = groups.toJSON();\n        }\n        this.config.push(action);\n        return this;\n    }\n    getActions() {\n        return this.actions;\n    }\n    toJSON() {\n        return this.config;\n    }\n}\nexports.default = CustomCacheKey;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass GroupConfig {\n    constructor(name) {\n        this.name = name;\n    }\n    byPattern(pattern) {\n        this.pattern = pattern;\n    }\n    toJSON() {\n        if (!this.pattern) {\n            throw new Error('byPattern is required for group ' + this.name);\n        }\n        return {\n            groupedValue: this.name,\n            matchRegex: this.pattern.source,\n        };\n    }\n}\nexports.default = GroupConfig;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GroupConfig_1 = __importDefault(require(\"./GroupConfig\"));\nclass Groups {\n    constructor() {\n        this.groups = [];\n        this.name = null;\n    }\n    group(name) {\n        const group = new GroupConfig_1.default(name);\n        this.groups.push(group);\n        return group;\n    }\n    toJSON() {\n        return this.groups.map(p => p.toJSON());\n    }\n}\nexports.default = Groups;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The name of the prefetch cache.\n *\n * Defaults to `prefetch`.\n */\nexports.CACHE_NAME = process.env.LAYER0_PREFETCH_CACHE_NAME || 'prefetch';\n/**\n * The header that lists the urls that were fetched from backends during server side rendering\n */\nexports.BACKEND_REQUESTS_RESPONSE_HEADER_NAME = 'x-0-upstream-requests';\n/**\n * The value of the prefetch header. Defaults to `1`.\n */\nexports.PREFETCH_HEADER_VALUE = process.env.LAYER0_PREFETCH_HEADER_VALUE || '1';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"@layer0/core/constants\");\n/**\n * Workbox only allows GET requests to be cached out-of-the-box, so this plugin\n * allows for changing the method of a request so that it can be cached.\n */\nclass ChangeMethodPlugin {\n    constructor(urls) {\n        this.urls = urls;\n    }\n    urlMatches(url) {\n        return this.urls.some(testUrl => testUrl.test(url));\n    }\n    /**\n     * Workbox requires cache keys to be GET method, so this forces the method when it is determined\n     * that the cache key will be used.\n     * If the request has a body, the body will be added to the URL for the cache key\n     * using the POST_BODY_QUERY_PARAM.\n     */\n    async cacheKeyWillBeUsed({ request }) {\n        const url = new URL(request.url);\n        if (this.urlMatches(url.pathname)) {\n            let body = await request.clone().text();\n            const bodyParam = url.searchParams.get(constants_1.POST_BODY_QUERY_PARAM);\n            if (!bodyParam && body) {\n                url.searchParams.set(constants_1.POST_BODY_QUERY_PARAM, encodeURIComponent(body));\n            }\n        }\n        return url.toString();\n    }\n    /**\n     *\n     */\n    async requestWillFetch({ request }) {\n        const url = new URL(request.url);\n        if (this.urlMatches(url.pathname) && request.method.toUpperCase() !== 'GET') {\n            // if the request is not a GET, then it's ok to modify the request and bump\n            // the priority since this means it is the real (non-prefetch) request (a\n            // prefetch request will not come in as anything but a GET)\n            const headers = new Headers(request.headers);\n            let body = await request.clone().text();\n            url.searchParams.set(constants_1.POST_BODY_QUERY_PARAM, body);\n            return new Request(url.toString(), {\n                method: 'get',\n                headers,\n                redirect: request.redirect,\n            });\n        }\n        return request;\n    }\n}\nexports.default = ChangeMethodPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CustomCacheKey_1 = require(\"@layer0/core/router/CustomCacheKey\");\nconst constants_1 = require(\"@layer0/core/constants\");\nclass CustomCacheKeyPlugin {\n    constructor(urls, config) {\n        this.route = urls;\n        this.config = config;\n    }\n    urlMatches(url) {\n        return this.route.test(url);\n    }\n    async cacheKeyWillBeUsed({ request }) {\n        const url = new URL(request.url);\n        if (this.urlMatches(url.pathname)) {\n            const url = new URL(request.url);\n            this.config.forEach(conf => this.handleKeyConfig(url, conf));\n            return url.toString();\n        }\n        return request;\n    }\n    handleKeyConfig(url, config) {\n        const deleteKeys = [];\n        switch (config.action) {\n            case CustomCacheKey_1.CUSTOM_CACHE_KEY_ACTIONS.blacklistAll:\n                url.searchParams.forEach((value, key) => {\n                    deleteKeys.push(key);\n                });\n                break;\n            case CustomCacheKey_1.CUSTOM_CACHE_KEY_ACTIONS.blacklistSome:\n                url.searchParams.forEach((value, key) => {\n                    if (config.names && config.names.includes(key)) {\n                        deleteKeys.push(key);\n                    }\n                });\n                break;\n            case CustomCacheKey_1.CUSTOM_CACHE_KEY_ACTIONS.whitelistSome:\n                url.searchParams.forEach((value, key) => {\n                    if (config.names && !config.names.includes(key)) {\n                        deleteKeys.push(key);\n                    }\n                });\n                break;\n            case CustomCacheKey_1.CUSTOM_CACHE_KEY_ACTIONS.removeBody:\n                url.searchParams.delete(constants_1.POST_BODY_QUERY_PARAM);\n                break;\n            case CustomCacheKey_1.CUSTOM_CACHE_KEY_ACTIONS.removeMethod:\n                url.searchParams.delete(constants_1.METHOD_QUERY_PARAM);\n                break;\n        }\n        deleteKeys.forEach(key => url.searchParams.delete(key));\n    }\n}\nexports.default = CustomCacheKeyPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PrefetchPlugin_1 = require(\"./PrefetchPlugin\");\n/**\n * Time after which we clear a given request metadata from memory.\n * This must be above usual http timeouts to be sure the request is completed.\n */\nconst CURRENT_REQUEST_MAP_CLEANUP_DELAY = 120000;\nclass DevtoolsPlugin {\n    constructor({ onResponse, routeConfig, isEnabledFn, }) {\n        this.currentRequests = {};\n        this.onResponse = onResponse;\n        this.routeConfig = routeConfig;\n        this.isEnabledFn = isEnabledFn;\n    }\n    /**\n     * Stores information about a request to be used by subsequent plugin steps\n     *\n     * IMPORTANT We do **not** use a custom header to store the metadata: a custom header leads\n     * to CORS pre-flight requests when using cache on a different origin, and those would likely\n     * reject our header.\n     * (more info https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Preflighted_requests)\n     *\n     * Unfortunately, there does not seem to be another way to (or if there is, feel free to fix this):\n     * - store information on the request instance that we be passed along to subsequent steps\n     * - identify a request uniquely with some sort of internal id\n     *\n     * For now, the solution is to use the normalized cache key to identify each request \"uniquely\",\n     * although that would lead to inconsistent results if a same request happens multiple time concurrently.\n     * It also adds overhead, especially for POST graphql query which serializes the body.\n     *\n     * After CURRENT_REQUEST_MAP_CLEANUP_DELAY, the metadata is cleared to avoid a memory leak.\n     * We don't clear explicitly from cachedResponseWillBeUsed/fetchDidSucceed, as it very complex (impossible?) to do it right:\n     * - we would need a counter on the current requests to be sure to not clear the metadata from concurrent equivalent request\n     * - incrementing/decrementing because we don't know in advance through which\n     *   plugin functions the request will go through, which is the first and which\n     *   is the last. We could make assumptions but that would lead to fragility.\n     */\n    async saveRequestMetadata(request, metadata) {\n        var _a, _b;\n        const normalizedUrl = await PrefetchPlugin_1.normalizeRequestUrlForCache(request);\n        if ((_a = this.currentRequests[normalizedUrl]) === null || _a === void 0 ? void 0 : _a.cleanupTimeout) {\n            clearTimeout(this.currentRequests[normalizedUrl].cleanupTimeout);\n        }\n        this.currentRequests[normalizedUrl] = {\n            metadata: {\n                ...(_b = this.currentRequests[normalizedUrl]) === null || _b === void 0 ? void 0 : _b.metadata,\n                ...metadata,\n            },\n            cleanupTimeout: setTimeout(() => {\n                delete this.currentRequests[normalizedUrl];\n            }, CURRENT_REQUEST_MAP_CLEANUP_DELAY),\n        };\n    }\n    async getRequestMetadata(request) {\n        var _a;\n        const normalizedUrl = await PrefetchPlugin_1.normalizeRequestUrlForCache(request);\n        return ((_a = this.currentRequests[normalizedUrl]) === null || _a === void 0 ? void 0 : _a.metadata) || {};\n    }\n    /**\n     * Notes:\n     * - It seems that we cannot add arbitrary attributes to the request object\n     *   so the best we can do is to store request info in a memory hash-map\n     */\n    async requestWillFetch({ request }) {\n        if (!this.isEnabledFn()) {\n            return request;\n        }\n        await this.saveRequestMetadata(request, { requestStart: Date.now() });\n        return request;\n    }\n    /**\n     * Called when an object is read from or written to the cache.\n     *\n     * Notes:\n     * - It seems that we cannot add arbitrary attributes to the request object\n     *   so the best we can do is to store request info in a memory hash-map\n     *\n     * - In case of cache 'read', we keep track of prefetch request so that we can identify them later\n     *   in `cachedResponseWillBeUsed`, which is called for both hit or miss.\n     *   Why here and not on response? Because in `cachedResponseWillBeUsed` we only get the cache-normalized request\n     *   where layer0_dt_pf query string got removed\n     */\n    async cacheKeyWillBeUsed({ request, mode }) {\n        if (!this.isEnabledFn()) {\n            return request;\n        }\n        if (mode === 'read') {\n            await this.saveRequestMetadata(request, {\n                isPrefetch: PrefetchPlugin_1.isPrefetchRequest(request),\n            });\n        }\n        return request;\n    }\n    async cachedResponseWillBeUsed({ request, cachedResponse: response, }) {\n        if (!this.isEnabledFn()) {\n            return response;\n        }\n        // In case of cache miss\n        if (!response)\n            return response;\n        const { isPrefetch } = await this.getRequestMetadata(request);\n        // TTFB is hard-coded to 0 for cached response\n        this.onResponse({\n            browserCache: 'hit',\n            ttfb: 0,\n            prefetch: isPrefetch,\n            request,\n            response,\n            routeConfig: this.routeConfig,\n        });\n        return response;\n    }\n    async fetchDidSucceed({ request, response }) {\n        if (!this.isEnabledFn()) {\n            return response;\n        }\n        const { requestStart } = await this.getRequestMetadata(request);\n        const ttfb = requestStart && Date.now() - requestStart;\n        this.onResponse({\n            browserCache: 'miss',\n            ttfb,\n            prefetch: PrefetchPlugin_1.isPrefetchRequest(request),\n            request,\n            response,\n            routeConfig: this.routeConfig,\n        });\n        return response;\n    }\n}\nexports.default = DevtoolsPlugin;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"@layer0/core/constants\");\nconst constants_2 = require(\"../constants\");\nconst log_1 = __importDefault(require(\"./log\"));\nconst prefetch_1 = require(\"./prefetch\");\nconst origin = new URL(self.origin);\nfunction isPrefetchRequest(request) {\n    return new URL(request.url).searchParams.has(constants_1.DEVTOOLS_PREFETCH_QUERY_PARAM);\n}\nexports.isPrefetchRequest = isPrefetchRequest;\nasync function normalizeRequestUrlForCache(request, { cacheHost } = {}) {\n    request = request.clone();\n    const url = new URL(request.url);\n    // When reading/writing cacheHost URLs convert them back to origin\n    if (cacheHost && url.hostname == cacheHost.hostname) {\n        url.host = origin.host;\n        url.protocol = origin.protocol;\n    }\n    const method = request.method.toLowerCase();\n    // For non-GET requests, we need to add the request body to the cache key by appending in to the URL query string\n    if (method !== 'get') {\n        let body = await request.text();\n        const bodyParam = url.searchParams.get(constants_1.POST_BODY_QUERY_PARAM);\n        if (!bodyParam && body) {\n            url.searchParams.set(constants_1.POST_BODY_QUERY_PARAM, encodeURIComponent(body));\n        }\n        // add method to the cache key so that we can cache requests to the same path with different methods\n        url.searchParams.set(constants_1.METHOD_QUERY_PARAM, request.method.toLowerCase());\n    }\n    // remove layer0_prefetch and layer0_dt_pf query params so that prefetches and real requests\n    // return from the same cache space\n    url.searchParams.delete(constants_1.THROTTLED_QUERY_PARAM);\n    url.searchParams.delete(constants_1.DEVTOOLS_PREFETCH_QUERY_PARAM);\n    // Decode query parameters both when writing to cache and when reading\n    // from cache. This ensures the cache is used no matter whether the URL\n    // is encoded in either step.\n    decodeQueryParams(url);\n    return url.toString();\n}\nexports.normalizeRequestUrlForCache = normalizeRequestUrlForCache;\nclass PrefetchPlugin {\n    constructor({ incrementRead, incrementWrite, cacheHost, prefetchUpstreamRequests, onlyCachePrefetches, }) {\n        this.incrementRead = incrementRead;\n        this.incrementWrite = incrementWrite;\n        this.cacheHost = cacheHost;\n        this.prefetchUpstreamRequests = prefetchUpstreamRequests;\n        this.onlyCachePrefetches = onlyCachePrefetches;\n    }\n    async requestWillFetch({ request }) {\n        // We need to send a clone of the request so that we can read the request body and use\n        // it in the cache key in the write phase of the cacheKeyWillBeUsed method.\n        return request.clone();\n    }\n    /**\n     * Called when an object is read from or written to the cache.  Here we\n     * compute cache stats and ensure that ?layer0_prefetch is removed from the cache key so\n     * that future requests for prefetched resources will match.\n     */\n    async cacheKeyWillBeUsed({ request, mode }) {\n        if (!isPrefetchRequest(request)) {\n            if (mode === 'read') {\n                this.incrementRead();\n            }\n            else {\n                this.incrementWrite();\n            }\n        }\n        return normalizeRequestUrlForCache(request, { cacheHost: this.cacheHost });\n    }\n    /**\n     * Called when a response is about to be written to the cache.\n     */\n    async cacheWillUpdate({ response, request, event }) {\n        // If prefetchUpstreamRequests is set, we only prefetch the html pages in SPA mode\n        // (e.g Angular) to get the upstream requests response header.  We don't actually want\n        // to serve the html from the cache, so this returns null:\n        if (this.prefetchUpstreamRequests) {\n            const backendRequests = response.headers.get(constants_2.BACKEND_REQUESTS_RESPONSE_HEADER_NAME);\n            if (backendRequests) {\n                const urlsToPrefetch = backendRequests.split(';');\n                urlsToPrefetch.forEach(url => {\n                    if (url)\n                        prefetch_1.prefetch(url);\n                });\n            }\n            return null;\n        }\n        // Service workers do not handle redirects well. If a redirected response is put in the cache,\n        // you'll see this error: \"a ServiceWorker passed a redirected Response to FetchEvent.respondWith()\n        // while RedirectMode is not ‘follow\"\n        // Returning null here prevents the response from being cached\n        if (response.redirected) {\n            log_1.default(`${response.url} was not added to the cache because it was a redirect.`);\n            return null;\n            // @ts-ignore\n        }\n        else if (!this.onlyCachePrefetches || isPrefetchRequest(event.request)) {\n            log_1.default(`${response.url} was added to the cache with key ${request.url}.`);\n            const headers = new Headers(response.headers);\n            headers.set('date', new Date().toUTCString());\n            return new Response(response.body, { ...response, headers });\n        }\n        else {\n            // For routes without an explicit serviceWorkerSeconds cache config, we only cache the\n            // response if the request was a prefetch. So in other words, we always write prefetches\n            // to the cache.\n            log_1.default(`${response.url} was not cached because it was not a prefetch.`);\n            return null;\n        }\n    }\n}\nexports.default = PrefetchPlugin;\n/**\n * Mutates the searchParams object, ensuring that each value is decoded.\n * @param {URL} url The URL whose params should be decoded\n */\nfunction decodeQueryParams(url) {\n    const maybeDecode = (val) => {\n        try {\n            return decodeURIComponent(val);\n        }\n        catch (e) {\n            // it will fail if the string has a % in it that isn't a URL-decoded entity,\n            // so that means the string is already decoded so we can just return the value:\n            return val;\n        }\n    };\n    url.searchParams.forEach((param, key) => {\n        url.searchParams.set(maybeDecode(key), maybeDecode(param));\n    });\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst workbox_routing_1 = require(\"workbox-routing\");\nconst workbox_strategies_1 = require(\"workbox-strategies\");\nconst workbox_expiration_1 = require(\"workbox-expiration\");\nconst workbox_cacheable_response_1 = require(\"workbox-cacheable-response\");\nconst constants_1 = require(\"../constants\");\nconst log_1 = __importDefault(require(\"./log\"));\nconst PrefetchPlugin_1 = __importDefault(require(\"./PrefetchPlugin\"));\nconst DevtoolsPlugin_1 = __importDefault(require(\"./DevtoolsPlugin\"));\nconst messageBrowser_1 = __importDefault(require(\"./messageBrowser\"));\nconst CustomCacheKeyPlugin_1 = __importDefault(require(\"./CustomCacheKeyPlugin\"));\nconst ChangeMethodPlugin_1 = __importDefault(require(\"./ChangeMethodPlugin\"));\nclass Stats {\n    constructor() {\n        this.hits = 0;\n        this.misses = 0;\n    }\n}\nexports.Stats = Stats;\nconst BUFFER_DELAY_MS = 10000;\nconst DEFAULT_MAX_AGE_SECONDS = 60 * 2; // 2 minutes\n/**\n * Handles prefetching and caching in the the service worker.  Responses\n * are cached based on the `browser.serviceWorkerSeconds` cache setting in your routes.\n *\n * **Example routes.js**\n *\n * ```js\n *  import { Router } from '@layer0/core/router'\n *\n *  module.exports = new Router()\n *    .match('/some/path', ({ cache }) => {\n *      cache({\n *        edge: {\n *          maxAgeSeconds: 60 * 60 * 24 // one day\n *        },\n *        browser: {\n *          serviceWorkerSeconds: 60 * 60 // one hour\n *        }\n *      })\n *    })\n * ```\n *\n * **Example Service Worker**\n *\n * ```js\n *  import { skipWaiting, clientsClaim } from 'workbox-core'\n *  import { Prefetcher } from '@layer0/prefetch/sw'\n *  import { precacheAndRoute } from 'workbox-precaching'\n *\n *  skipWaiting()\n *  clientsClaim()\n *  precacheAndRoute(self.__WB_MANIFEST || [])\n *\n *  new Prefetcher().route()\n * ```\n */\nclass Prefetcher {\n    constructor(config = { plugins: [] }) {\n        // For performance reasons, Devtools plugins are disabled until the first\n        // 'layer0-devtools-syn' message is received (ie: a Devtools client is enabled).\n        // But once enabled, they will remain active until the Service Worker is reinstalled\n        this.devtoolsEnabled = false;\n        /**\n         * bufferedDevtoolMessages keeps track of the request received in the last BUFFER_DELAY_MS.\n         */\n        this.bufferedDevtoolMessages = [];\n        this.config = config;\n        let manifestURL = '__layer0__/cache-manifest.js';\n        this.cacheOrigins = [self.origin];\n        if (config.cacheHost) {\n            this.cacheHost = new URL(`https://${config.cacheHost}`);\n            this.cacheOrigins.push(this.cacheHost.origin);\n            manifestURL = this.cacheHost.toString() + manifestURL;\n        }\n        importScripts(manifestURL);\n        this.cacheableResponsePlugin = new workbox_cacheable_response_1.CacheableResponsePlugin({\n            statuses: [200, 301, 302],\n        });\n        this.stats = new Stats();\n        this.initStats();\n        this.initDevtoolsHandshakeListener();\n    }\n    getRouteConfigsFromManifest() {\n        // @ts-ignore\n        const manifest = self.__LAYER0_CACHE_MANIFEST__;\n        return manifest.map(({ criteriaPath, route, cacheOptions, method, returnsResponse }) => {\n            var _a, _b, _c;\n            const maxAgeSeconds = (_a = cacheOptions.browser) === null || _a === void 0 ? void 0 : _a.serviceWorkerSeconds;\n            const edgeMaxAgeSeconds = (_b = cacheOptions.edge) === null || _b === void 0 ? void 0 : _b.maxAgeSeconds;\n            return {\n                criteriaPath,\n                pattern: route,\n                method,\n                maxAgeSeconds,\n                edgeMaxAgeSeconds,\n                returnsResponse,\n                isPartialPathRoute: true,\n                key: cacheOptions.key,\n                convertToGet: (_c = cacheOptions.browser) === null || _c === void 0 ? void 0 : _c.convertToGet,\n                prefetchUpstreamRequests: cacheOptions.prefetchUpstreamRequests,\n            };\n        });\n    }\n    registerDevtoolsRoutes() {\n        for (const routeConfig of this.getRouteConfigsFromManifest()) {\n            // Add listener for all routes that are not cached in the browser as those already have a route handler\n            if (!routeConfig.maxAgeSeconds && !routeConfig.returnsResponse) {\n                this.createDevtoolsRoute(routeConfig);\n            }\n        }\n        // Also add a fallback route in case the cache manifest does not specify any\n        this.createDevtoolsRoute();\n    }\n    /**\n     * Adds a fetch event listener that serves content from the browser cache when available.  When\n     * a request is not in the cache, it will be fetched from the network and added to the\n     * cache if the route has `browser.serviceWorkerSeconds` defined in its `cache` setting or if the\n     * request is a prefetch.\n     */\n    route() {\n        for (const routeConfig of this.getRouteConfigsFromManifest()) {\n            this.createRoute(routeConfig);\n        }\n        return this;\n    }\n    cache(pattern, maxAgeSeconds = 60 * 60 * 24) {\n        this.createRoute({ pattern: pattern.source, maxAgeSeconds, isPartialPathRoute: false });\n        return this;\n    }\n    /**\n     * Starts listening for messages from the browser\n     */\n    initStats() {\n        self.addEventListener('message', (e) => {\n            if (e.data.action === 'get-stats') {\n                messageBrowser_1.default({\n                    type: 'stats',\n                    stats: this.stats,\n                });\n            }\n        });\n    }\n    /**\n     * Here we implement a handshake protocol between the devtool window client and the service worker:\n     * 1. Devtools sends the 'layer0-devtools-syn' event and starts listening for 'layer0-devtools-ack' event\n     * 2. Service worker receives the 'layer0-devtools-syn' event and sends the 'layer0-devtools-ack' event\n     *    along with the buffered messages that were received over the last BUFFER_DELAY_MS.\n     *    This is because the window widget takes time to download, load and to start listening from\n     *    Service worker message, while the latter is already receiving http requests.\n     * 3. Devtools receives the 'layer0-devtools-ack' event, looks for its current page html request,\n     *    which corresponds to that tab very first request, and loads requests past that one.\n     * 4. Devtools starts listening for live 'layer0-devtools-request' events\n     *\n     * Notes:\n     * - there is no 1-1 channel between window client and Service Worker, so all opened tab\n     *   will see the 'layer0-devtools-ack' event. Only the ones in handshake phase will handle it.\n     */\n    initDevtoolsHandshakeListener() {\n        self.addEventListener('message', async (e) => {\n            if (e.data.action === 'layer0-devtools-install') {\n                if (!this.devtoolsEnabled) {\n                    this.registerDevtoolsRoutes();\n                    this.devtoolsEnabled = true;\n                    // Devtools plugin just got initialized so we missed\n                    // a few queries. We send a message so that the browser\n                    // refreshes its page.\n                    this.sendToAllClients({\n                        type: 'layer0-devtools-ack-installed',\n                    });\n                }\n            }\n            if (e.data.action === 'layer0-devtools-syn') {\n                if (this.devtoolsEnabled) {\n                    const ackMessage = {\n                        type: 'layer0-devtools-ack',\n                        bufferedDevtoolMessages: this.bufferedDevtoolMessages,\n                    };\n                    this.sendToAllClients(ackMessage);\n                }\n            }\n            if (e.data.action === 'layer0-devtools-clear-cache') {\n                caches.keys().then(cacheNames => cacheNames.forEach(name => caches.delete(name)));\n            }\n        });\n    }\n    /**\n     * Send a postMessage event to all window client.\n     * Notes:\n     * - When used in multi-tabs, each Devtools will show data from all tabs.\n     *   That's a bit buggy but it's the best we can do as it's very hard to establish 1-1 channels\n     *   on ServiceWorker/Client interface, for example the message event from the window does not\n     *   contain the clientId\n     */\n    async sendToAllClients(data) {\n        messageBrowser_1.default(data, { broadcast: true });\n    }\n    /**\n     * Adds a message to this.bufferedDevtoolMessages and manages the buffer so that\n     * we don't keep messages more than BUFFER_DELAY_MS.\n     *\n     * In case of inactivity we clear the whole buffer after BUFFER_DELAY_MS, so technically\n     * a message can stay up to 2 x BUFFER_DELAY_MS in the buffer (a bit less than BUFFER_DELAY_MS old\n     * when the latest message arrives and cleared BUFFER_DELAY_MS later)\n     * @param message\n     */\n    addDevtoolsRequestMessageToBuffer(message) {\n        this.bufferedDevtoolMessages.push(message);\n        this.trimDevtoolsRequestMessageBuffer();\n        if (this.clearDevtoolsRequestMessageTimeout) {\n            clearTimeout(this.clearDevtoolsRequestMessageTimeout);\n        }\n        // If no additional request for BUFFER_DELAY_MS, we clear the buffer after that\n        this.clearDevtoolsRequestMessageTimeout = setTimeout(() => {\n            this.bufferedDevtoolMessages = [];\n        }, BUFFER_DELAY_MS);\n    }\n    /**\n     * Remove message that are too old to stay in devtools message buffer\n     */\n    trimDevtoolsRequestMessageBuffer() {\n        let sliceIndex = 0;\n        const sliceMinimumTimestamp = Date.now() - BUFFER_DELAY_MS;\n        while (this.bufferedDevtoolMessages[sliceIndex] &&\n            this.bufferedDevtoolMessages[sliceIndex].timestamp < sliceMinimumTimestamp) {\n            sliceIndex++;\n        }\n        this.bufferedDevtoolMessages = this.bufferedDevtoolMessages.slice(sliceIndex);\n    }\n    /**\n     * If there's a cacheHost configured check whether the pattern to test\n     * against is a partial pathname pattern. If so, check that the origin is\n     * also correct: service worker's own origin or cacheHost origin\n     * @param pattern A route pattern\n     * @param isPartialPathRoute Set to true if the supplied pattern only matches the path, false if it matches the whole URL.\n     * @param options.skipAssets Set to true to ignore request that are not 'document' or 'empty' (ie: audio, font, image, ...)\n     * @return true if the request should be handled by the service worker.\n     */\n    shouldIntercept(pattern, isPartialPathRoute, { skipAssets = false } = {}) {\n        return ({ url, request }) => {\n            if (skipAssets &&\n                request.destination &&\n                !['document', 'empty'].includes(request.destination)) {\n                return false;\n            }\n            if (isPartialPathRoute) {\n                return this.cacheOrigins.includes(url.origin) && pattern.test(url.pathname);\n            }\n            else {\n                return pattern.test(url.toString());\n            }\n        };\n    }\n    /**\n     * Creates a DevtoolsPlugin object to be added to a caching strategy instance\n     * @param routeConfig The route config for the given route\n     * @private\n     */\n    createDevtoolsPlugin(routeConfig) {\n        return new DevtoolsPlugin_1.default({\n            onResponse: this.onResponse.bind(this),\n            isEnabledFn: () => this.devtoolsEnabled,\n            routeConfig,\n        });\n    }\n    /**\n     * Creates a Workbox route which only purpose is to forward requests/response\n     * data to the Devtools\n     * @param routeConfig The route pattern and caching options specified within the route definition\n     *                    If undefined, it catches all GET queries except static assets\n     */\n    createDevtoolsRoute(routeConfig) {\n        let method, routeMatcher;\n        if (routeConfig) {\n            const { pattern, isPartialPathRoute } = routeConfig;\n            const patternRegexp = new RegExp(pattern, 'i');\n            routeMatcher = this.shouldIntercept(patternRegexp, isPartialPathRoute, { skipAssets: true });\n            method = (routeConfig.method || 'get').toUpperCase();\n        }\n        else {\n            routeMatcher = this.shouldIntercept(/^.*$/, true, { skipAssets: true });\n            method = 'GET';\n        }\n        workbox_routing_1.registerRoute(routeMatcher, new workbox_strategies_1.NetworkOnly({\n            plugins: [this.createDevtoolsPlugin(routeConfig)],\n        }), \n        // @ts-ignore\n        method);\n    }\n    /**\n     * Creates a workbox route.\n     * @param routeConfig The route pattern and caching options specified within the route definition\n     */\n    createRoute(routeConfig) {\n        const { pattern, method: optMethod, maxAgeSeconds, isPartialPathRoute, key, convertToGet, prefetchUpstreamRequests, } = routeConfig;\n        const method = (optMethod || 'get').toLowerCase();\n        log_1.default(`[route] ${method} ${pattern}, maxAgeSeconds: ${maxAgeSeconds}`);\n        const patternRegexp = new RegExp(pattern, 'i');\n        // all routes must have a GET route registered, so Workbox can properly look\n        // it up when running workbox-routing/Router#findMatchingRoute:\n        if (method !== 'get') {\n            this.createRoute({ ...routeConfig, method: 'get' });\n        }\n        const routeHasServiceWorkerCaching = (routeConfig.maxAgeSeconds && routeConfig.maxAgeSeconds > 0) ||\n            // or for routes that return an x-0-upstream-requests header:\n            routeConfig.prefetchUpstreamRequests;\n        const prefetchPlugin = new PrefetchPlugin_1.default({\n            incrementRead: this.incrementRead.bind(this),\n            incrementWrite: this.incrementWrite.bind(this),\n            cacheHost: this.cacheHost,\n            prefetchUpstreamRequests,\n            onlyCachePrefetches: !routeHasServiceWorkerCaching,\n        });\n        const ttl = maxAgeSeconds || this.config.defaultMaxAgeSeconds || DEFAULT_MAX_AGE_SECONDS;\n        const plugins = [\n            this.cacheableResponsePlugin,\n            new workbox_expiration_1.ExpirationPlugin({ maxAgeSeconds: ttl }),\n            // DevtoolPlugin needs to be injected before PrefetchPlugin as this later\n            // changes request url to normalise the cache key\n            this.createDevtoolsPlugin(routeConfig),\n            prefetchPlugin,\n            ...(this.config.plugins || []),\n        ];\n        if (key) {\n            plugins.push(new CustomCacheKeyPlugin_1.default(patternRegexp, key));\n        }\n        if (convertToGet) {\n            // ChangeMethodPlugin must come before PrefetchPlugin so body is retained:\n            plugins.splice(plugins.indexOf(prefetchPlugin), 0, new ChangeMethodPlugin_1.default([patternRegexp]));\n        }\n        workbox_routing_1.registerRoute(this.shouldIntercept(patternRegexp, isPartialPathRoute), new workbox_strategies_1.CacheFirst({\n            cacheName: constants_1.CACHE_NAME,\n            matchOptions: {\n                ignoreVary: true,\n            },\n            plugins,\n        }), \n        // @ts-ignore\n        method.toUpperCase() // HTTPMethods map directly from @layer0/core lowercase => @workbox uppercase\n        );\n    }\n    /**\n     * A Read is considered a Hit until a Write happens meaning it was a miss\n     * This is based on the fragile assumption that a cache read *always* triggers a write\n     * in case of cache miss, which is not true if the backend does not respond for example.\n     *\n     * This could be fixed by checking the presence of `response` in `cachedResponseWillBeUsed``\n     * but that leads to other issues as we cannot discard Prefetch requests at that\n     * stage.\n     * We could implement the same Hack-ish solution as in DevtoolsPlugin to work around that,\n     * but those simple stats are probably going away anyway.\n     */\n    incrementRead() {\n        this.stats.hits++;\n    }\n    incrementWrite() {\n        this.stats.misses++;\n        this.stats.hits--;\n    }\n    async onResponse({ request, response, ttfb, prefetch, browserCache, routeConfig, }) {\n        const headers = {};\n        response.headers.forEach((value, key) => {\n            headers[key] = value;\n        });\n        const devToolMessage = {\n            type: 'layer0-devtools-request',\n            timestamp: Date.now(),\n            request: {\n                method: request.method,\n                url: request.url,\n                prefetch,\n            },\n            response: {\n                ttfb,\n                status: response.status,\n                headers,\n            },\n            browserCache,\n            routeConfig,\n        };\n        this.sendToAllClients(devToolMessage);\n        this.addDevtoolsRequestMessageToBuffer(devToolMessage);\n    }\n}\nexports.default = Prefetcher;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Prefetcher_1 = require(\"./Prefetcher\");\nexports.Prefetcher = Prefetcher_1.default;\nvar prefetch_1 = require(\"./prefetch\");\nexports.prefetch = prefetch_1.prefetch;\n","\"use strict\";\n/* istanbul ignore file */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction log(...message) {\n    if (process.env.NODE_ENV !== 'production') {\n        console.log('%c@layer0/prefetch', 'background: #43a047; color: #ffffff; font-weight:bold; padding: 3px 5px; border-radius: 5px', ...message);\n    }\n}\nexports.default = log;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sends a message to the last focused browser window.\n * @param message\n */\nfunction messageBrowser(message, { broadcast = false } = {}) {\n    // @ts-ignore\n    return self.clients.matchAll({ type: 'window' }).then((clients) => {\n        let targetClients = clients;\n        if (!broadcast && clients.length) {\n            // clients array is ordered by last focused\n            targetClients = [clients[0]];\n        }\n        targetClients.forEach(client => client.postMessage(message));\n    });\n}\nexports.default = messageBrowser;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messageBrowser_1 = __importDefault(require(\"./messageBrowser\"));\n/**\n * Prefetches an asset.\n * @param url The asset URL\n * @param as The value for the link element's `as` attribute.\n *  See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link.\n *  Use \"fetch\" for html pages as Safari doesn't support \"document\".\n */\nfunction prefetch(url, as = 'fetch', options = { cors: 'anonymous' }) {\n    return messageBrowser_1.default({ action: 'prefetch', url, as, options });\n}\nexports.prefetch = prefetch;\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:cacheable-response:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A class that wraps common IndexedDB functionality in a promise-based API.\n * It exposes all the underlying power and functionality of IndexedDB, but\n * wraps the most commonly used features in a way that's much simpler to use.\n *\n * @private\n */\nexport class DBWrapper {\n    /**\n     * @param {string} name\n     * @param {number} version\n     * @param {Object=} [callback]\n     * @param {!Function} [callbacks.onupgradeneeded]\n     * @param {!Function} [callbacks.onversionchange] Defaults to\n     *     DBWrapper.prototype._onversionchange when not specified.\n     * @private\n     */\n    constructor(name, version, { onupgradeneeded, onversionchange, } = {}) {\n        this._db = null;\n        this._name = name;\n        this._version = version;\n        this._onupgradeneeded = onupgradeneeded;\n        this._onversionchange = onversionchange || (() => this.close());\n    }\n    /**\n     * Returns the IDBDatabase instance (not normally needed).\n     * @return {IDBDatabase|undefined}\n     *\n     * @private\n     */\n    get db() {\n        return this._db;\n    }\n    /**\n     * Opens a connected to an IDBDatabase, invokes any onupgradedneeded\n     * callback, and added an onversionchange callback to the database.\n     *\n     * @return {IDBDatabase}\n     * @private\n     */\n    async open() {\n        if (this._db)\n            return;\n        this._db = await new Promise((resolve, reject) => {\n            // This flag is flipped to true if the timeout callback runs prior\n            // to the request failing or succeeding. Note: we use a timeout instead\n            // of an onblocked handler since there are cases where onblocked will\n            // never never run. A timeout better handles all possible scenarios:\n            // https://github.com/w3c/IndexedDB/issues/223\n            let openRequestTimedOut = false;\n            setTimeout(() => {\n                openRequestTimedOut = true;\n                reject(new Error('The open request was blocked and timed out'));\n            }, this.OPEN_TIMEOUT);\n            const openRequest = indexedDB.open(this._name, this._version);\n            openRequest.onerror = () => reject(openRequest.error);\n            openRequest.onupgradeneeded = (evt) => {\n                if (openRequestTimedOut) {\n                    openRequest.transaction.abort();\n                    openRequest.result.close();\n                }\n                else if (typeof this._onupgradeneeded === 'function') {\n                    this._onupgradeneeded(evt);\n                }\n            };\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                if (openRequestTimedOut) {\n                    db.close();\n                }\n                else {\n                    db.onversionchange = this._onversionchange.bind(this);\n                    resolve(db);\n                }\n            };\n        });\n        return this;\n    }\n    /**\n     * Polyfills the native `getKey()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @return {Array}\n     * @private\n     */\n    async getKey(storeName, query) {\n        return (await this.getAllKeys(storeName, query, 1))[0];\n    }\n    /**\n     * Polyfills the native `getAll()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @param {number} count\n     * @return {Array}\n     * @private\n     */\n    async getAll(storeName, query, count) {\n        return await this.getAllMatching(storeName, { query, count });\n    }\n    /**\n     * Polyfills the native `getAllKeys()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @param {number} count\n     * @return {Array}\n     * @private\n     */\n    async getAllKeys(storeName, query, count) {\n        const entries = await this.getAllMatching(storeName, { query, count, includeKeys: true });\n        return entries.map((entry) => entry.key);\n    }\n    /**\n     * Supports flexible lookup in an object store by specifying an index,\n     * query, direction, and count. This method returns an array of objects\n     * with the signature .\n     *\n     * @param {string} storeName\n     * @param {Object} [opts]\n     * @param {string} [opts.index] The index to use (if specified).\n     * @param {*} [opts.query]\n     * @param {IDBCursorDirection} [opts.direction]\n     * @param {number} [opts.count] The max number of results to return.\n     * @param {boolean} [opts.includeKeys] When true, the structure of the\n     *     returned objects is changed from an array of values to an array of\n     *     objects in the form {key, primaryKey, value}.\n     * @return {Array}\n     * @private\n     */\n    async getAllMatching(storeName, { index, query = null, // IE/Edge errors if query === `undefined`.\n    direction = 'next', count, includeKeys = false, } = {}) {\n        return await this.transaction([storeName], 'readonly', (txn, done) => {\n            const store = txn.objectStore(storeName);\n            const target = index ? store.index(index) : store;\n            const results = [];\n            const request = target.openCursor(query, direction);\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    results.push(includeKeys ? cursor : cursor.value);\n                    if (count && results.length >= count) {\n                        done(results);\n                    }\n                    else {\n                        cursor.continue();\n                    }\n                }\n                else {\n                    done(results);\n                }\n            };\n        });\n    }\n    /**\n     * Accepts a list of stores, a transaction type, and a callback and\n     * performs a transaction. A promise is returned that resolves to whatever\n     * value the callback chooses. The callback holds all the transaction logic\n     * and is invoked with two arguments:\n     *   1. The IDBTransaction object\n     *   2. A `done` function, that's used to resolve the promise when\n     *      when the transaction is done, if passed a value, the promise is\n     *      resolved to that value.\n     *\n     * @param {Array<string>} storeNames An array of object store names\n     *     involved in the transaction.\n     * @param {string} type Can be `readonly` or `readwrite`.\n     * @param {!Function} callback\n     * @return {*} The result of the transaction ran by the callback.\n     * @private\n     */\n    async transaction(storeNames, type, callback) {\n        await this.open();\n        return await new Promise((resolve, reject) => {\n            const txn = this._db.transaction(storeNames, type);\n            txn.onabort = () => reject(txn.error);\n            txn.oncomplete = () => resolve();\n            callback(txn, (value) => resolve(value));\n        });\n    }\n    /**\n     * Delegates async to a native IDBObjectStore method.\n     *\n     * @param {string} method The method name.\n     * @param {string} storeName The object store name.\n     * @param {string} type Can be `readonly` or `readwrite`.\n     * @param {...*} args The list of args to pass to the native method.\n     * @return {*} The result of the transaction.\n     * @private\n     */\n    async _call(method, storeName, type, ...args) {\n        const callback = (txn, done) => {\n            const objStore = txn.objectStore(storeName);\n            // TODO(philipwalton): Fix this underlying TS2684 error.\n            // @ts-ignore\n            const request = objStore[method].apply(objStore, args);\n            request.onsuccess = () => done(request.result);\n        };\n        return await this.transaction([storeName], type, callback);\n    }\n    /**\n     * Closes the connection opened by `DBWrapper.open()`. Generally this method\n     * doesn't need to be called since:\n     *   1. It's usually better to keep a connection open since opening\n     *      a new connection is somewhat slow.\n     *   2. Connections are automatically closed when the reference is\n     *      garbage collected.\n     * The primary use case for needing to close a connection is when another\n     * reference (typically in another tab) needs to upgrade it and would be\n     * blocked by the current, open connection.\n     *\n     * @private\n     */\n    close() {\n        if (this._db) {\n            this._db.close();\n            this._db = null;\n        }\n    }\n}\n// Exposed on the prototype to let users modify the default timeout on a\n// per-instance or global basis.\nDBWrapper.prototype.OPEN_TIMEOUT = 2000;\n// Wrap native IDBObjectStore methods according to their mode.\nconst methodsToWrap = {\n    readonly: ['get', 'count', 'getKey', 'getAll', 'getAllKeys'],\n    readwrite: ['add', 'put', 'clear', 'delete'],\n};\nfor (const [mode, methods] of Object.entries(methodsToWrap)) {\n    for (const method of methods) {\n        if (method in IDBObjectStore.prototype) {\n            // Don't use arrow functions here since we're outside of the class.\n            DBWrapper.prototype[method] =\n                async function (storeName, ...args) {\n                    return await this._call(method, storeName, mode, ...args);\n                };\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return `The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`;\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className ? (className + '.') : ''}` +\n            `${funcName}()' must be of type ${expectedType}.`;\n    },\n    'incorrect-class': ({ expectedClass, paramName, moduleName, className, funcName, isReturnValueProblem }) => {\n        if (!expectedClass || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        if (isReturnValueProblem) {\n            return `The return value from ` +\n                `'${moduleName}.${className ? (className + '.') : ''}${funcName}()' ` +\n                `must be an instance of class ${expectedClass.name}.`;\n        }\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className ? (className + '.') : ''}${funcName}()' ` +\n            `must be an instance of class ${expectedClass.name}.`;\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName }) => {\n        if (!expectedMethod || !paramName || !moduleName || !className\n            || !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return `${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return `An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`;\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` +\n                `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return `Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry._entryId} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`;\n    },\n    'plugin-error-request-will-fetch': ({ thrownError }) => {\n        if (!thrownError) {\n            throw new Error(`Unexpected input to ` +\n                `'plugin-error-request-will-fetch', error.`);\n        }\n        return `An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownError.message}'.`;\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return `You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`;\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return `The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`;\n    },\n    'unregister-route-route-not-registered': () => {\n        return `The route you're trying to unregister was not previously ` +\n            `registered.`;\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return `The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return `The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`;\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return `The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`;\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName }) => {\n        return `The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`;\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return `You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`;\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return `You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`;\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return `When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`;\n    },\n    'channel-name-required': () => {\n        return `You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`;\n    },\n    'invalid-responses-are-same-args': () => {\n        return `The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`;\n    },\n    'expire-custom-caches-only': () => {\n        return `You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`;\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return `The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return `Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`;\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return `The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`;\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return `The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return `Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`;\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return `There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`;\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return `The precaching request for '${url}' failed with an HTTP ` +\n            `status of ${status}.`;\n    },\n    'non-precached-url': ({ url }) => {\n        return `createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`;\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return `Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`;\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\n    fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from './assert.js';\nimport { executeQuotaErrorCallbacks } from './executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from './getFriendlyURL.js';\nimport { logger } from './logger.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport { WorkboxError } from './WorkboxError.js';\nimport '../_version.js';\n/**\n * Checks the list of plugins for the cacheKeyWillBeUsed callback, and\n * executes any of those callbacks found in sequence. The final `Request` object\n * returned by the last plugin is treated as the cache key for cache reads\n * and/or writes.\n *\n * @param {Object} options\n * @param {Request} options.request\n * @param {string} options.mode\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Request>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst _getEffectiveRequest = async ({ request, mode, plugins = [], }) => {\n    const cacheKeyWillBeUsedPlugins = pluginUtils.filter(plugins, \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */);\n    let effectiveRequest = request;\n    for (const plugin of cacheKeyWillBeUsedPlugins) {\n        effectiveRequest = await plugin[\"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */].call(plugin, { mode, request: effectiveRequest });\n        if (typeof effectiveRequest === 'string') {\n            effectiveRequest = new Request(effectiveRequest);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(effectiveRequest, Request, {\n                moduleName: 'Plugin',\n                funcName: \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */,\n                isReturnValueProblem: true,\n            });\n        }\n    }\n    return effectiveRequest;\n};\n/**\n * This method will call cacheWillUpdate on the available plugins (or use\n * status === 200) to determine if the Response is safe and valid to cache.\n *\n * @param {Object} options\n * @param {Request} options.request\n * @param {Response} options.response\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst _isResponseSafeToCache = async ({ request, response, event, plugins = [], }) => {\n    let responseToCache = response;\n    let pluginsUsed = false;\n    for (const plugin of plugins) {\n        if (\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */ in plugin) {\n            pluginsUsed = true;\n            const pluginMethod = plugin[\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */];\n            responseToCache = await pluginMethod.call(plugin, {\n                request,\n                response: responseToCache,\n                event,\n            });\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    assert.isInstance(responseToCache, Response, {\n                        moduleName: 'Plugin',\n                        funcName: \"cacheWillUpdate\" /* CACHE_WILL_UPDATE */,\n                        isReturnValueProblem: true,\n                    });\n                }\n            }\n            if (!responseToCache) {\n                break;\n            }\n        }\n    }\n    if (!pluginsUsed) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (responseToCache) {\n                if (responseToCache.status !== 200) {\n                    if (responseToCache.status === 0) {\n                        logger.warn(`The response for '${request.url}' is an opaque ` +\n                            `response. The caching strategy that you're using will not ` +\n                            `cache opaque responses by default.`);\n                    }\n                    else {\n                        logger.debug(`The response for '${request.url}' returned ` +\n                            `a status code of '${response.status}' and won't be cached as a ` +\n                            `result.`);\n                    }\n                }\n            }\n        }\n        responseToCache = responseToCache && responseToCache.status === 200 ?\n            responseToCache : undefined;\n    }\n    return responseToCache ? responseToCache : null;\n};\n/**\n * This is a wrapper around cache.match().\n *\n * @param {Object} options\n * @param {string} options.cacheName Name of the cache to match against.\n * @param {Request} options.request The Request that will be used to look up\n *     cache entries.\n * @param {Event} [options.event] The event that prompted the action.\n * @param {Object} [options.matchOptions] Options passed to cache.match().\n * @param {Array<Object>} [options.plugins=[]] Array of plugins.\n * @return {Response} A cached response if available.\n *\n * @private\n * @memberof module:workbox-core\n */\nconst matchWrapper = async ({ cacheName, request, event, matchOptions, plugins = [], }) => {\n    const cache = await self.caches.open(cacheName);\n    const effectiveRequest = await _getEffectiveRequest({\n        plugins, request, mode: 'read'\n    });\n    let cachedResponse = await cache.match(effectiveRequest, matchOptions);\n    if (process.env.NODE_ENV !== 'production') {\n        if (cachedResponse) {\n            logger.debug(`Found a cached response in '${cacheName}'.`);\n        }\n        else {\n            logger.debug(`No cached response found in '${cacheName}'.`);\n        }\n    }\n    for (const plugin of plugins) {\n        if (\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */ in plugin) {\n            const pluginMethod = plugin[\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */];\n            cachedResponse = await pluginMethod.call(plugin, {\n                cacheName,\n                event,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n            });\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachedResponse) {\n                    assert.isInstance(cachedResponse, Response, {\n                        moduleName: 'Plugin',\n                        funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n                        isReturnValueProblem: true,\n                    });\n                }\n            }\n        }\n    }\n    return cachedResponse;\n};\n/**\n * Wrapper around cache.put().\n *\n * Will call `cacheDidUpdate` on plugins if the cache was updated, using\n * `matchOptions` when determining what the old entry is.\n *\n * @param {Object} options\n * @param {string} options.cacheName\n * @param {Request} options.request\n * @param {Response} options.response\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @param {Object} [options.matchOptions]\n *\n * @private\n * @memberof module:workbox-core\n */\nconst putWrapper = async ({ cacheName, request, response, event, plugins = [], matchOptions, }) => {\n    if (process.env.NODE_ENV !== 'production') {\n        if (request.method && request.method !== 'GET') {\n            throw new WorkboxError('attempt-to-cache-non-get-request', {\n                url: getFriendlyURL(request.url),\n                method: request.method,\n            });\n        }\n    }\n    const effectiveRequest = await _getEffectiveRequest({\n        plugins, request, mode: 'write'\n    });\n    if (!response) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Cannot cache non-existent response for ` +\n                `'${getFriendlyURL(effectiveRequest.url)}'.`);\n        }\n        throw new WorkboxError('cache-put-with-no-response', {\n            url: getFriendlyURL(effectiveRequest.url),\n        });\n    }\n    const responseToCache = await _isResponseSafeToCache({\n        event,\n        plugins,\n        response,\n        request: effectiveRequest,\n    });\n    if (!responseToCache) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' will ` +\n                `not be cached.`, responseToCache);\n        }\n        return;\n    }\n    const cache = await self.caches.open(cacheName);\n    const updatePlugins = pluginUtils.filter(plugins, \"cacheDidUpdate\" /* CACHE_DID_UPDATE */);\n    const oldResponse = updatePlugins.length > 0 ?\n        await matchWrapper({ cacheName, matchOptions, request: effectiveRequest }) :\n        null;\n    if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`Updating the '${cacheName}' cache with a new Response for ` +\n            `${getFriendlyURL(effectiveRequest.url)}.`);\n    }\n    try {\n        await cache.put(effectiveRequest, responseToCache);\n    }\n    catch (error) {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n        if (error.name === 'QuotaExceededError') {\n            await executeQuotaErrorCallbacks();\n        }\n        throw error;\n    }\n    for (const plugin of updatePlugins) {\n        await plugin[\"cacheDidUpdate\" /* CACHE_DID_UPDATE */].call(plugin, {\n            cacheName,\n            event,\n            oldResponse,\n            newResponse: responseToCache,\n            request: effectiveRequest,\n        });\n    }\n};\nexport const cacheWrapper = {\n    put: putWrapper,\n    match: matchWrapper,\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Deletes the database.\n * Note: this is exported separately from the DBWrapper module because most\n * usages of IndexedDB in workbox dont need deleting, and this way it can be\n * reused in tests to delete databases without creating DBWrapper instances.\n *\n * @param {string} name The database name.\n * @private\n */\nexport const deleteDatabase = async (name) => {\n    await new Promise((resolve, reject) => {\n        const request = indexedDB.deleteDatabase(name);\n        request.onerror = () => {\n            reject(request.error);\n        };\n        request.onblocked = () => {\n            reject(new Error('Delete blocked'));\n        };\n        request.onsuccess = () => {\n            resolve();\n        };\n    });\n};\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    promise.then(() => { });\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof module:workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from './WorkboxError.js';\nimport { logger } from './logger.js';\nimport { assert } from './assert.js';\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport '../_version.js';\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Object} options\n * @param {Request|string} options.request\n * @param {Object} [options.fetchOptions]\n * @param {ExtendableEvent} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst wrappedFetch = async ({ request, fetchOptions, event, plugins = [], }) => {\n    if (typeof request === 'string') {\n        request = new Request(request);\n    }\n    // We *should* be able to call `await event.preloadResponse` even if it's\n    // undefined, but for some reason, doing so leads to errors in our Node unit\n    // tests. To work around that, explicitly check preloadResponse's value first.\n    if (event instanceof FetchEvent && event.preloadResponse) {\n        const possiblePreloadResponse = await event.preloadResponse;\n        if (possiblePreloadResponse) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Using a preloaded navigation response for ` +\n                    `'${getFriendlyURL(request.url)}'`);\n            }\n            return possiblePreloadResponse;\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(request, Request, {\n            paramName: 'request',\n            expectedClass: Request,\n            moduleName: 'workbox-core',\n            className: 'fetchWrapper',\n            funcName: 'wrappedFetch',\n        });\n    }\n    const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */);\n    // If there is a fetchDidFail plugin, we need to save a clone of the\n    // original request before it's either modified by a requestWillFetch\n    // plugin or before the original request's body is consumed via fetch().\n    const originalRequest = failedFetchPlugins.length > 0 ?\n        request.clone() : null;\n    try {\n        for (const plugin of plugins) {\n            if (\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin) {\n                const pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\n                const requestClone = request.clone();\n                request = await pluginMethod.call(plugin, {\n                    request: requestClone,\n                    event,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (request) {\n                        assert.isInstance(request, Request, {\n                            moduleName: 'Plugin',\n                            funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    catch (err) {\n        throw new WorkboxError('plugin-error-request-will-fetch', {\n            thrownError: err,\n        });\n    }\n    // The request can be altered by plugins with `requestWillFetch` making\n    // the original request (Most likely from a `fetch` event) to be different\n    // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n    const pluginFilteredRequest = request.clone();\n    try {\n        let fetchResponse;\n        // See https://github.com/GoogleChrome/workbox/issues/1796\n        if (request.mode === 'navigate') {\n            fetchResponse = await fetch(request);\n        }\n        else {\n            fetchResponse = await fetch(request, fetchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' returned a response with ` +\n                `status '${fetchResponse.status}'.`);\n        }\n        for (const plugin of plugins) {\n            if (\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in plugin) {\n                fetchResponse = await plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */]\n                    .call(plugin, {\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (fetchResponse) {\n                        assert.isInstance(fetchResponse, Response, {\n                            moduleName: 'Plugin',\n                            funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n        return fetchResponse;\n    }\n    catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' threw an error.`, error);\n        }\n        for (const plugin of failedFetchPlugins) {\n            await plugin[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(plugin, {\n                error,\n                event,\n                originalRequest: originalRequest.clone(),\n                request: pluginFilteredRequest.clone(),\n            });\n        }\n        throw error;\n    }\n};\nconst fetchWrapper = {\n    fetch: wrappedFetch,\n};\nexport { fetchWrapper };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production' ? null : (() => {\n    // Don't overwrite this value if it's already set.\n    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n    if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: `#7f8c8d`,\n        log: `#2ecc71`,\n        warn: `#f39c12`,\n        error: `#c0392b`,\n        groupCollapsed: `#3498db`,\n        groupEnd: null,\n    };\n    const print = function (method, args) {\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === 'groupCollapsed') {\n            // Safari doesn't print all console.groupCollapsed() arguments:\n            // https://bugs.webkit.org/show_bug.cgi?id=182754\n            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            `border-radius: 0.5em`,\n            `color: white`,\n            `font-weight: bold`,\n            `padding: 2px 0.5em`,\n        ];\n        // When in a group, the workbox prefix is not displayed.\n        const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n        console[method](...logPrefix, ...args);\n        if (method === 'groupCollapsed') {\n            inGroup = true;\n        }\n        if (method === 'groupEnd') {\n            inGroup = false;\n        }\n    };\n    const api = {};\n    const loggerMethods = Object.keys(methodToColorMap);\n    for (const key of loggerMethods) {\n        const method = key;\n        api[method] = (...args) => {\n            print(method, args);\n        };\n    }\n    return api;\n})());\nexport { logger };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof module:workbox-core\n */\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const pluginUtils = {\n    filter: (plugins, callbackName) => {\n        return plugins.filter((plugin) => callbackName in plugin);\n    },\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:5.1.4'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:5.1.4'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:5.1.4'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof module:workbox-cacheable-response\n */\nclass CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.statuses || config.headers)) {\n                throw new WorkboxError('statuses-or-headers-required', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.statuses',\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, 'object', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.headers',\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n    isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(response, Response, {\n                moduleName: 'workbox-cacheable-response',\n                className: 'CacheableResponse',\n                funcName: 'isResponseCacheable',\n                paramName: 'response',\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName) => {\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for ` +\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\n                    `not meet the criteria for being cached.`);\n                logger.groupCollapsed(`View cacheability criteria here.`);\n                logger.log(`Cacheable statuses: ` +\n                    JSON.stringify(this._statuses));\n                logger.log(`Cacheable headers: ` +\n                    JSON.stringify(this._headers, null, 2));\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key) => {\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(`View response status and headers here.`);\n                logger.log(`Response status: ` + response.status);\n                logger.log(`Response headers: ` +\n                    JSON.stringify(logFriendlyHeaders, null, 2));\n                logger.groupEnd();\n                logger.groupCollapsed(`View full response details here.`);\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\nexport { CacheableResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheableResponse } from './CacheableResponse.js';\nimport './_version.js';\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof module:workbox-cacheable-response\n */\nclass CacheableResponsePlugin {\n    /**\n     * To construct a new CacheableResponsePlugin instance you must provide at\n     * least one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config) {\n        /**\n         * @param {Object} options\n         * @param {Response} options.response\n         * @return {Response|null}\n         * @private\n         */\n        this.cacheWillUpdate = async ({ response }) => {\n            if (this._cacheableResponse.isResponseCacheable(response)) {\n                return response;\n            }\n            return null;\n        };\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n}\nexport { CacheableResponsePlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst OBJECT_STORE_NAME = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._cacheName = cacheName;\n        this._db = new DBWrapper(DB_NAME, 1, {\n            onupgradeneeded: (event) => this._handleUpgrade(event),\n        });\n    }\n    /**\n     * Should perform an upgrade of indexedDB.\n     *\n     * @param {Event} event\n     *\n     * @private\n     */\n    _handleUpgrade(event) {\n        const db = event.target.result;\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n        // Previous versions of `workbox-expiration` used `this._cacheName`\n        // as the IDBDatabase name.\n        deleteDatabase(this._cacheName);\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        await this._db.put(OBJECT_STORE_NAME, entry);\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\n        return entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\n            const store = txn.objectStore(OBJECT_STORE_NAME);\n            const request = store.index('timestamp').openCursor(null, 'prev');\n            const entriesToDelete = [];\n            let entriesNotDeletedCount = 0;\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    const result = cursor.value;\n                    // TODO(philipwalton): once we can use a multi-key index, we\n                    // won't have to check `cacheName` here.\n                    if (result.cacheName === this._cacheName) {\n                        // Delete an entry if it's older than the max age or\n                        // if we already have the max number allowed.\n                        if ((minTimestamp && result.timestamp < minTimestamp) ||\n                            (maxCount && entriesNotDeletedCount >= maxCount)) {\n                            // TODO(philipwalton): we should be able to delete the\n                            // entry right here, but doing so causes an iteration\n                            // bug in Safari stable (fixed in TP). Instead we can\n                            // store the keys of the entries to delete, and then\n                            // delete the separate transactions.\n                            // https://github.com/GoogleChrome/workbox/issues/1978\n                            // cursor.delete();\n                            // We only need to return the URL, not the whole entry.\n                            entriesToDelete.push(cursor.value);\n                        }\n                        else {\n                            entriesNotDeletedCount++;\n                        }\n                    }\n                    cursor.continue();\n                }\n                else {\n                    done(entriesToDelete);\n                }\n            };\n        });\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await this._db.delete(OBJECT_STORE_NAME, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n}\nexport { CacheTimestampsModel };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof module:workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n                // TODO: Assert is positive\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n                // TODO: Assert is positive\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds ?\n            Date.now() - (this._maxAgeSeconds * 1000) : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ?\n                    'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - (this._maxAgeSeconds * 1000);\n            return (timestamp < expireOlderThan);\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in the Workbox APIs to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * Whenever a cached request is used or updated, this plugin will look\n * at the used Cache and remove any old or extra requests.\n *\n * When using `maxAgeSeconds`, requests may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached request has been used. If the request has a \"Date\" header, then\n * a light weight expiration check is performed and the request will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof module:workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - (this._maxAgeSeconds * 1000);\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * [Route]{@link module:workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` +\n                    `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp}' only partially matched ` +\n                        `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle (this is usually\n     *     from a fetch event, but it does not have to be).\n     * @param {FetchEvent} [options.event] The event that triggered the request,\n     *     if applicable.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const { params, route } = this.findMatchingRoute({ url, request, event });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        if (!handler && this._defaultHandler) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler.`);\n            }\n            handler = this._defaultHandler;\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        if (responsePromise instanceof Promise && this._catchHandler) {\n            responsePromise = responsePromise.catch((err) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Still include URL here as it will be async from the console group\n                    // and may not make sense without the URL\n                    logger.groupCollapsed(`Error thrown when responding to: ` +\n                        ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n                    logger.error(`Error thrown by:`, route);\n                    logger.error(err);\n                    logger.groupEnd();\n                }\n                return this._catchHandler.handle({ url, request, event });\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request The request to match.\n     * @param {Event} [options.event] The corresponding event (unless N/A).\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(url, URL, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.url',\n            });\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.request',\n            });\n        }\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            const matchResult = route.match({ url, request, event });\n            if (matchResult) {\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                params = matchResult;\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object &&\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setDefaultHandler(handler) {\n        this._defaultHandler = normalizeHandler(handler);\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @memberof module:workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http') ?\n                captureUrl.pathname : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if ((new RegExp(`${wildcards}`)).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if ((url.pathname === captureUrl.pathname) &&\n                    (url.origin !== captureUrl.origin)) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n}\nexport { setCatchHandler };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n}\nexport { setDefaultHandler };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass CacheFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'CacheFirst',\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await this._getFromNetwork(request, event);\n            }\n            catch (err) {\n                error = err;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('CacheFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * Handles the network and cache part of CacheFirst.\n     *\n     * @param {Request} request\n     * @param {Event} [event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork(request, event) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        // Keep the service worker while we put the request to the cache\n        const responseClone = response.clone();\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: responseClone,\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [cache-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass CacheOnly {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'CacheOnly',\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        const response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('CacheOnly', request));\n            if (response) {\n                logger.log(`Found a cached response in the '${this._cacheName}'` +\n                    ` cache.`);\n                messages.printFinalResponse(response);\n            }\n            else {\n                logger.log(`No response found in the '${this._cacheName}' cache.`);\n            }\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n}\nexport { CacheOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} options.networkTimeoutSeconds If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: 'NetworkFirst',\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'NetworkFirst',\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, event, logs });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({ timeoutId, request, event, logs });\n        promises.push(networkPromise);\n        // Promise.race() will resolve as soon as the first promise resolves.\n        let response = await Promise.race(promises);\n        // If Promise.race() resolved with null, it might be due to a network\n        // timeout + a cache miss. If that were to happen, we'd rather wait until\n        // the networkPromise resolves instead of returning null.\n        // Note that it's fine to await an already-resolved promise, so we don't\n        // have to check to see if it's still \"in flight\".\n        if (!response) {\n            response = await networkPromise;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, event }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await this._respondFromCache({ request, event }));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, event }) {\n        let error;\n        let response;\n        try {\n            response = await fetchWrapper.fetch({\n                request,\n                event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins,\n            });\n        }\n        catch (err) {\n            error = err;\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await this._respondFromCache({ request, event });\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this._cacheName}'` +\n                        ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this._cacheName}' cache.`);\n                }\n            }\n        }\n        else {\n            // Keep the service worker alive while we put the request in the cache\n            const responseClone = response.clone();\n            const cachePut = cacheWrapper.put({\n                cacheName: this._cacheName,\n                request,\n                response: responseClone,\n                event,\n                plugins: this._plugins,\n            });\n            if (event) {\n                try {\n                    // The event has been responded to so we can keep the SW alive to\n                    // respond to the request\n                    event.waitUntil(cachePut);\n                }\n                catch (err) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        return response;\n    }\n    /**\n     * Used if the network timeouts or fails to make the request.\n     *\n     * @param {Object} options\n     * @param {Request} request The request to match in the cache\n     * @param {Event} [options.event]\n     * @return {Promise<Object>}\n     *\n     * @private\n     */\n    _respondFromCache({ event, request }) {\n        return cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n    }\n}\nexport { NetworkFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass NetworkOnly {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     */\n    constructor(options = {}) {\n        this._plugins = options.plugins || [];\n        this._fetchOptions = options.fetchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request The request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'NetworkOnly',\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        let error;\n        let response;\n        try {\n            response = await fetchWrapper.fetch({\n                request,\n                event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins,\n            });\n        }\n        catch (err) {\n            error = err;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('NetworkOnly', request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'StaleWhileRevalidate',\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = this._getFromNetwork({ request, event });\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n            if (event) {\n                try {\n                    event.waitUntil(fetchAndCachePromise);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork({ request, event }) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: response.clone(),\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream)\n * object.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `ReadableStream`, `false` otherwise.\n *\n * @private\n */\nfunction canConstructReadableStream() {\n    if (supportStatus === undefined) {\n        // See https://github.com/GoogleChrome/workbox/issues/1473\n        try {\n            new ReadableStream({ start() { } });\n            supportStatus = true;\n        }\n        catch (error) {\n            supportStatus = false;\n        }\n    }\n    return supportStatus;\n}\nexport { canConstructReadableStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof module:workbox-core\n */\nasync function copyResponse(response, modifier) {\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream() ?\n        clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof module:workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Force a service worker to activate immediately, instead of\n * [waiting](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#waiting)\n * for existing clients to close.\n *\n * @memberof module:workbox-core\n */\nfunction skipWaiting() {\n    // We need to explicitly call `self.skipWaiting()` here because we're\n    // shadowing `skipWaiting` with this local function.\n    self.addEventListener('install', () => self.skipWaiting());\n}\nexport { skipWaiting };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst plugins = [];\nexport const precachePlugins = {\n    /*\n     * @return {Array}\n     * @private\n     */\n    get() {\n        return plugins;\n    },\n    /*\n     * @param {Array} newPlugins\n     * @private\n     */\n    add(newPlugins) {\n        plugins.push(...newPlugins);\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof module:workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {string} [cacheName] An optional name for the cache, to override\n     * the default precache name.\n     */\n    constructor(cacheName) {\n        this._cacheName = cacheNames.getPrecacheName(cacheName);\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {\n     * Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>\n     * } entries Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = (typeof entry !== 'string' && entry.revision) ?\n                'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * @param {Object} options\n     * @param {Event} [options.event] The install event (if needed).\n     * @param {Array<Object>} [options.plugins] Plugins to be used for fetching\n     * and caching during install.\n     * @return {Promise<module:workbox-precaching.InstallResult>}\n     */\n    async install({ event, plugins } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (plugins) {\n                assert.isArray(plugins, {\n                    moduleName: 'workbox-precaching',\n                    className: 'PrecacheController',\n                    funcName: 'install',\n                    paramName: 'plugins',\n                });\n            }\n        }\n        const toBePrecached = [];\n        const alreadyPrecached = [];\n        const cache = await self.caches.open(this._cacheName);\n        const alreadyCachedRequests = await cache.keys();\n        const existingCacheKeys = new Set(alreadyCachedRequests.map((request) => request.url));\n        for (const [url, cacheKey] of this._urlsToCacheKeys) {\n            if (existingCacheKeys.has(cacheKey)) {\n                alreadyPrecached.push(url);\n            }\n            else {\n                toBePrecached.push({ cacheKey, url });\n            }\n        }\n        const precacheRequests = toBePrecached.map(({ cacheKey, url }) => {\n            const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n            const cacheMode = this._urlsToCacheModes.get(url);\n            return this._addURLToCache({\n                cacheKey,\n                cacheMode,\n                event,\n                integrity,\n                plugins,\n                url,\n            });\n        });\n        await Promise.all(precacheRequests);\n        const updatedURLs = toBePrecached.map((item) => item.url);\n        if (process.env.NODE_ENV !== 'production') {\n            printInstallDetails(updatedURLs, alreadyPrecached);\n        }\n        return {\n            updatedURLs,\n            notUpdatedURLs: alreadyPrecached,\n        };\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * @return {Promise<module:workbox-precaching.CleanupResult>}\n     */\n    async activate() {\n        const cache = await self.caches.open(this._cacheName);\n        const currentlyCachedRequests = await cache.keys();\n        const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n        const deletedURLs = [];\n        for (const request of currentlyCachedRequests) {\n            if (!expectedCacheKeys.has(request.url)) {\n                await cache.delete(request);\n                deletedURLs.push(request.url);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            printCleanupDetails(deletedURLs);\n        }\n        return { deletedURLs };\n    }\n    /**\n     * Requests the entry and saves it to the cache if the response is valid.\n     * By default, any response with a status code of less than 400 (including\n     * opaque responses) is considered valid.\n     *\n     * If you need to use custom criteria to determine what's valid and what\n     * isn't, then pass in an item in `options.plugins` that implements the\n     * `cacheWillUpdate()` lifecycle event.\n     *\n     * @private\n     * @param {Object} options\n     * @param {string} options.cacheKey The string to use a cache key.\n     * @param {string} options.url The URL to fetch and cache.\n     * @param {string} [options.cacheMode] The cache mode for the network request.\n     * @param {Event} [options.event] The install event (if passed).\n     * @param {Array<Object>} [options.plugins] An array of plugins to apply to\n     * fetch and caching.\n     * @param {string} [options.integrity] The value to use for the `integrity`\n     * field when making the request.\n     */\n    async _addURLToCache({ cacheKey, url, cacheMode, event, plugins, integrity }) {\n        const request = new Request(url, {\n            integrity,\n            cache: cacheMode,\n            credentials: 'same-origin',\n        });\n        let response = await fetchWrapper.fetch({\n            event,\n            plugins,\n            request,\n        });\n        // Allow developers to override the default logic about what is and isn't\n        // valid by passing in a plugin implementing cacheWillUpdate(), e.g.\n        // a `CacheableResponsePlugin` instance.\n        let cacheWillUpdatePlugin;\n        for (const plugin of (plugins || [])) {\n            if ('cacheWillUpdate' in plugin) {\n                cacheWillUpdatePlugin = plugin;\n            }\n        }\n        const isValidResponse = cacheWillUpdatePlugin ?\n            // Use a callback if provided. It returns a truthy value if valid.\n            // NOTE: invoke the method on the plugin instance so the `this` context\n            // is correct.\n            await cacheWillUpdatePlugin.cacheWillUpdate({ event, request, response }) :\n            // Otherwise, default to considering any response status under 400 valid.\n            // This includes, by default, considering opaque responses valid.\n            response.status < 400;\n        // Consider this a failure, leading to the `install` handler failing, if\n        // we get back an invalid response.\n        if (!isValidResponse) {\n            throw new WorkboxError('bad-precaching-response', {\n                url,\n                status: response.status,\n            });\n        }\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        if (response.redirected) {\n            response = await copyResponse(response);\n        }\n        await cacheWrapper.put({\n            event,\n            plugins,\n            response,\n            // `request` already uses `url`. We may be able to reuse it.\n            request: cacheKey === url ? request : new Request(cacheKey),\n            cacheName: this._cacheName,\n            matchOptions: {\n                ignoreSearch: true,\n            },\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * This acts as a drop-in replacement for [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this._cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that can be used within a\n     * {@link module:workbox-routing.Route} that will find a response for the\n     * incoming request against the precache.\n     *\n     * If for an unexpected reason there is a cache miss for the request,\n     * this will fall back to retrieving the `Response` via `fetch()` when\n     * `fallbackToNetwork` is `true`.\n     *\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n     * response from the network if there's a precache miss.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n    createHandler(fallbackToNetwork = true) {\n        return async ({ request }) => {\n            try {\n                const response = await this.matchPrecache(request);\n                if (response) {\n                    return response;\n                }\n                // This shouldn't normally happen, but there are edge cases:\n                // https://github.com/GoogleChrome/workbox/issues/1441\n                throw new WorkboxError('missing-precache-entry', {\n                    cacheName: this._cacheName,\n                    url: request instanceof Request ? request.url : request,\n                });\n            }\n            catch (error) {\n                if (fallbackToNetwork) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.debug(`Unable to respond with precached response. ` +\n                            `Falling back to network.`, error);\n                    }\n                    return fetch(request);\n                }\n                throw error;\n            }\n        };\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * If for an unexpected reason there is a cache miss when looking up `url`,\n     * this will fall back to retrieving the `Response` via `fetch()` when\n     * `fallbackToNetwork` is `true`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n     * response from the network if there's a precache miss.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url, fallbackToNetwork = true) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        const handler = this.createHandler(fallbackToNetwork);\n        const request = new Request(url);\n        return () => handler({ request });\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching, directoryIndex, cleanURLs, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './getOrCreatePrecacheController.js';\nimport { generateURLVariations } from './generateURLVariations.js';\nimport '../_version.js';\n/**\n * This function will take the request URL and manipulate it based on the\n * configuration options.\n *\n * @param {string} url\n * @param {Object} options\n * @return {string} Returns the URL in the cache that matches the request,\n * if possible.\n *\n * @private\n */\nexport const getCacheKeyForURL = (url, options) => {\n    const precacheController = getOrCreatePrecacheController();\n    const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n    for (const possibleURL of generateURLVariations(url, options)) {\n        const possibleCacheKey = urlsToCacheKeys.get(possibleURL);\n        if (possibleCacheKey) {\n            return possibleCacheKey;\n        }\n    }\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\nimport '../_version.js';\n/**\n * Adds a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * NOTE: when called more than once this method will replace the previously set\n * configuration options. Calling it more than once is not recommended outside\n * of tests.\n *\n * @private\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n */\nexport const addFetchListener = ({ ignoreURLParametersMatching = [/^utm_/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) => {\n    const cacheName = cacheNames.getPrecacheName();\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('fetch', ((event) => {\n        const precachedURL = getCacheKeyForURL(event.request.url, {\n            cleanURLs,\n            directoryIndex,\n            ignoreURLParametersMatching,\n            urlManipulation,\n        });\n        if (!precachedURL) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` +\n                    getFriendlyURL(event.request.url));\n            }\n            return;\n        }\n        let responsePromise = self.caches.open(cacheName).then((cache) => {\n            return cache.match(precachedURL);\n        }).then((cachedResponse) => {\n            if (cachedResponse) {\n                return cachedResponse;\n            }\n            // Fall back to the network if we don't have a cached response\n            // (perhaps due to manual cache cleanup).\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(precachedURL)} in ${cacheName} was not found. ` +\n                    `Falling back to the network instead.`);\n            }\n            return fetch(precachedURL);\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            responsePromise = responsePromise.then((response) => {\n                // Workbox is going to handle the route.\n                // print the routing details to the console.\n                logger.groupCollapsed(`Precaching is responding to: ` +\n                    getFriendlyURL(event.request.url));\n                logger.log(`Serving the precached url: ${precachedURL}`);\n                logger.groupCollapsed(`View request details here.`);\n                logger.log(event.request);\n                logger.groupEnd();\n                logger.groupCollapsed(`View response details here.`);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n                return response;\n            });\n        }\n        event.respondWith(responsePromise);\n    }));\n};\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addFetchListener } from './utils/addFetchListener.js';\nimport './_version.js';\nlet listenerAdded = false;\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options]\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n * check cache entries for a URLs ending with '/' to see if there is a hit when\n * appending the `directoryIndex` value.\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\n * array of regex's to remove search params when looking for a cache match.\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n * check the cache for the URL with a `.html` added to the end of the end.\n * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\n * This is a function that should take a URL and return an array of\n * alternative URLs that should be checked for precache matches.\n *\n * @memberof module:workbox-precaching\n */\nfunction addRoute(options) {\n    if (!listenerAdded) {\n        addFetchListener(options);\n        listenerAdded = true;\n    }\n}\nexport { addRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { precachePlugins } from './utils/precachePlugins.js';\nimport './_version.js';\nconst installListener = (event) => {\n    const precacheController = getOrCreatePrecacheController();\n    const plugins = precachePlugins.get();\n    event.waitUntil(precacheController.install({ event, plugins })\n        .catch((error) => {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Service worker installation failed. It will ` +\n                `be retried automatically during the next navigation.`);\n        }\n        // Re-throw the error to ensure installation fails.\n        throw error;\n    }));\n};\nconst activateListener = (event) => {\n    const precacheController = getOrCreatePrecacheController();\n    event.waitUntil(precacheController.activate());\n};\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof module:workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.addToCacheList(entries);\n    if (entries.length > 0) {\n        // NOTE: these listeners will only be added once (even if the `precache()`\n        // method is called multiple times) because event listeners are implemented\n        // as a set, where each listener must be unique.\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('install', installListener);\n        self.addEventListener('activate', activateListener);\n    }\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * [precache()]{@link module:workbox-precaching.precache} and\n * [addRoute()]{@link module:workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See\n * [addRoute() options]{@link module:workbox-precaching.addRoute}.\n *\n * @memberof module:workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","import { skipWaiting, clientsClaim } from 'workbox-core'\nimport { precacheAndRoute } from 'workbox-precaching'\nimport { Prefetcher } from '@layer0/prefetch/sw'\n\nskipWaiting()\nclientsClaim()\nprecacheAndRoute(self.__WB_MANIFEST || [])\n\nnew Prefetcher().route()"]}